<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="821.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="821.00"> </text><svg id="frames" x="10" width="1180" total_samples="1467"><g><title>&lt;std::sys::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.14%)</title><rect x="0.0000%" y="213" width="0.1363%" height="15" fill="rgb(222,217,39)" fg:x="0" fg:w="2"/><text x="0.2500%" y="223.50"></text></g><g><title>readdir (2 samples, 0.14%)</title><rect x="0.0000%" y="197" width="0.1363%" height="15" fill="rgb(210,219,27)" fg:x="0" fg:w="2"/><text x="0.2500%" y="207.50"></text></g><g><title>getdents64 (2 samples, 0.14%)</title><rect x="0.0000%" y="181" width="0.1363%" height="15" fill="rgb(252,166,36)" fg:x="0" fg:w="2"/><text x="0.2500%" y="191.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::fdreaddir (2 samples, 0.14%)</title><rect x="0.1363%" y="213" width="0.1363%" height="15" fill="rgb(245,132,34)" fg:x="2" fg:w="2"/><text x="0.3863%" y="223.50"></text></g><g><title>fdopendir (2 samples, 0.14%)</title><rect x="0.1363%" y="197" width="0.1363%" height="15" fill="rgb(236,54,3)" fg:x="2" fg:w="2"/><text x="0.3863%" y="207.50"></text></g><g><title>__fxstat64 (1 samples, 0.07%)</title><rect x="0.2045%" y="181" width="0.0682%" height="15" fill="rgb(241,173,43)" fg:x="3" fg:w="1"/><text x="0.4545%" y="191.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (23 samples, 1.57%)</title><rect x="0.0000%" y="229" width="1.5678%" height="15" fill="rgb(215,190,9)" fg:x="0" fg:w="23"/><text x="0.2500%" y="239.50"></text></g><g><title>unlinkat (19 samples, 1.30%)</title><rect x="0.2727%" y="213" width="1.2952%" height="15" fill="rgb(242,101,16)" fg:x="4" fg:w="19"/><text x="0.5227%" y="223.50"></text></g><g><title>pipeline::prep_unpack (24 samples, 1.64%)</title><rect x="0.0000%" y="389" width="1.6360%" height="15" fill="rgb(223,190,21)" fg:x="0" fg:w="24"/><text x="0.2500%" y="399.50"></text></g><g><title>dataprep_pipelines::utils::fs::ensure_path_exists_and_is_empty_dir (24 samples, 1.64%)</title><rect x="0.0000%" y="373" width="1.6360%" height="15" fill="rgb(215,228,25)" fg:x="0" fg:w="24"/><text x="0.2500%" y="383.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all (24 samples, 1.64%)</title><rect x="0.0000%" y="357" width="1.6360%" height="15" fill="rgb(225,36,22)" fg:x="0" fg:w="24"/><text x="0.2500%" y="367.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern (24 samples, 1.64%)</title><rect x="0.0000%" y="341" width="1.6360%" height="15" fill="rgb(251,106,46)" fg:x="0" fg:w="24"/><text x="0.2500%" y="351.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (24 samples, 1.64%)</title><rect x="0.0000%" y="325" width="1.6360%" height="15" fill="rgb(208,90,1)" fg:x="0" fg:w="24"/><text x="0.2500%" y="335.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (24 samples, 1.64%)</title><rect x="0.0000%" y="309" width="1.6360%" height="15" fill="rgb(243,10,4)" fg:x="0" fg:w="24"/><text x="0.2500%" y="319.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern::{{closure}} (24 samples, 1.64%)</title><rect x="0.0000%" y="293" width="1.6360%" height="15" fill="rgb(212,137,27)" fg:x="0" fg:w="24"/><text x="0.2500%" y="303.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (24 samples, 1.64%)</title><rect x="0.0000%" y="277" width="1.6360%" height="15" fill="rgb(231,220,49)" fg:x="0" fg:w="24"/><text x="0.2500%" y="287.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (24 samples, 1.64%)</title><rect x="0.0000%" y="261" width="1.6360%" height="15" fill="rgb(237,96,20)" fg:x="0" fg:w="24"/><text x="0.2500%" y="271.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (24 samples, 1.64%)</title><rect x="0.0000%" y="245" width="1.6360%" height="15" fill="rgb(239,229,30)" fg:x="0" fg:w="24"/><text x="0.2500%" y="255.50"></text></g><g><title>unlinkat (1 samples, 0.07%)</title><rect x="1.5678%" y="229" width="0.0682%" height="15" fill="rgb(219,65,33)" fg:x="23" fg:w="1"/><text x="1.8178%" y="239.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (14 samples, 0.95%)</title><rect x="4.3626%" y="165" width="0.9543%" height="15" fill="rgb(243,134,7)" fg:x="64" fg:w="14"/><text x="4.6126%" y="175.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (12 samples, 0.82%)</title><rect x="4.4990%" y="149" width="0.8180%" height="15" fill="rgb(216,177,54)" fg:x="66" fg:w="12"/><text x="4.7490%" y="159.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (12 samples, 0.82%)</title><rect x="4.4990%" y="133" width="0.8180%" height="15" fill="rgb(211,160,20)" fg:x="66" fg:w="12"/><text x="4.7490%" y="143.50"></text></g><g><title>age_core::primitives::hkdf (1 samples, 0.07%)</title><rect x="5.3170%" y="149" width="0.0682%" height="15" fill="rgb(239,85,39)" fg:x="78" fg:w="1"/><text x="5.5670%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.14%)</title><rect x="5.5896%" y="133" width="0.1363%" height="15" fill="rgb(232,125,22)" fg:x="82" fg:w="2"/><text x="5.8396%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.48%)</title><rect x="5.3170%" y="165" width="0.4772%" height="15" fill="rgb(244,57,34)" fg:x="78" fg:w="7"/><text x="5.5670%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.41%)</title><rect x="5.3851%" y="149" width="0.4090%" height="15" fill="rgb(214,203,32)" fg:x="79" fg:w="6"/><text x="5.6351%" y="159.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.07%)</title><rect x="5.7260%" y="133" width="0.0682%" height="15" fill="rgb(207,58,43)" fg:x="84" fg:w="1"/><text x="5.9760%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),std::io::error::Error&gt;&gt; (1 samples, 0.07%)</title><rect x="5.7260%" y="117" width="0.0682%" height="15" fill="rgb(215,193,15)" fg:x="84" fg:w="1"/><text x="5.9760%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (1 samples, 0.07%)</title><rect x="5.7260%" y="101" width="0.0682%" height="15" fill="rgb(232,15,44)" fg:x="84" fg:w="1"/><text x="5.9760%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::repr_bitpacked::Repr&gt; (1 samples, 0.07%)</title><rect x="5.7260%" y="85" width="0.0682%" height="15" fill="rgb(212,3,48)" fg:x="84" fg:w="1"/><text x="5.9760%" y="95.50"></text></g><g><title>&lt;std::io::error::repr_bitpacked::Repr as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="5.7260%" y="69" width="0.0682%" height="15" fill="rgb(218,128,7)" fg:x="84" fg:w="1"/><text x="5.9760%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::ErrorData&lt;alloc::boxed::Box&lt;std::io::error::Custom&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="5.7260%" y="53" width="0.0682%" height="15" fill="rgb(226,216,39)" fg:x="84" fg:w="1"/><text x="5.9760%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;std::io::error::Custom&gt;&gt; (1 samples, 0.07%)</title><rect x="5.7260%" y="37" width="0.0682%" height="15" fill="rgb(243,47,51)" fg:x="84" fg:w="1"/><text x="5.9760%" y="47.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (38 samples, 2.59%)</title><rect x="3.2720%" y="181" width="2.5903%" height="15" fill="rgb(241,183,40)" fg:x="48" fg:w="38"/><text x="3.5220%" y="191.50">&lt;F..</text></g><g><title>cfree (1 samples, 0.07%)</title><rect x="5.7941%" y="165" width="0.0682%" height="15" fill="rgb(231,217,32)" fg:x="85" fg:w="1"/><text x="6.0441%" y="175.50"></text></g><g><title>age_core::format::read::legacy_age_stanza (44 samples, 3.00%)</title><rect x="2.9993%" y="229" width="2.9993%" height="15" fill="rgb(229,61,38)" fg:x="44" fg:w="44"/><text x="3.2493%" y="239.50">age..</text></g><g><title>age_core::format::read::age_stanza (44 samples, 3.00%)</title><rect x="2.9993%" y="213" width="2.9993%" height="15" fill="rgb(225,210,5)" fg:x="44" fg:w="44"/><text x="3.2493%" y="223.50">age..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (42 samples, 2.86%)</title><rect x="3.1357%" y="197" width="2.8630%" height="15" fill="rgb(231,79,45)" fg:x="46" fg:w="42"/><text x="3.3857%" y="207.50">&lt;F..</text></g><g><title>cfree (2 samples, 0.14%)</title><rect x="5.8623%" y="181" width="0.1363%" height="15" fill="rgb(224,100,7)" fg:x="86" fg:w="2"/><text x="6.1123%" y="191.50"></text></g><g><title>cfree (4 samples, 0.27%)</title><rect x="5.9986%" y="229" width="0.2727%" height="15" fill="rgb(241,198,18)" fg:x="88" fg:w="4"/><text x="6.2486%" y="239.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (50 samples, 3.41%)</title><rect x="2.9312%" y="245" width="3.4083%" height="15" fill="rgb(252,97,53)" fg:x="43" fg:w="50"/><text x="3.1812%" y="255.50">&lt;F ..</text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.07%)</title><rect x="6.2713%" y="229" width="0.0682%" height="15" fill="rgb(220,88,7)" fg:x="92" fg:w="1"/><text x="6.5213%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),std::io::error::Error&gt;&gt; (1 samples, 0.07%)</title><rect x="6.2713%" y="213" width="0.0682%" height="15" fill="rgb(213,176,14)" fg:x="92" fg:w="1"/><text x="6.5213%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (1 samples, 0.07%)</title><rect x="6.2713%" y="197" width="0.0682%" height="15" fill="rgb(246,73,7)" fg:x="92" fg:w="1"/><text x="6.5213%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::repr_bitpacked::Repr&gt; (1 samples, 0.07%)</title><rect x="6.2713%" y="181" width="0.0682%" height="15" fill="rgb(245,64,36)" fg:x="92" fg:w="1"/><text x="6.5213%" y="191.50"></text></g><g><title>&lt;std::io::error::repr_bitpacked::Repr as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="6.2713%" y="165" width="0.0682%" height="15" fill="rgb(245,80,10)" fg:x="92" fg:w="1"/><text x="6.5213%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::ErrorData&lt;alloc::boxed::Box&lt;std::io::error::Custom&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="6.2713%" y="149" width="0.0682%" height="15" fill="rgb(232,107,50)" fg:x="92" fg:w="1"/><text x="6.5213%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;std::io::error::Custom&gt;&gt; (1 samples, 0.07%)</title><rect x="6.2713%" y="133" width="0.0682%" height="15" fill="rgb(253,3,0)" fg:x="92" fg:w="1"/><text x="6.5213%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.07%)</title><rect x="6.3395%" y="245" width="0.0682%" height="15" fill="rgb(212,99,53)" fg:x="93" fg:w="1"/><text x="6.5895%" y="255.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (52 samples, 3.54%)</title><rect x="2.9312%" y="261" width="3.5446%" height="15" fill="rgb(249,111,54)" fg:x="43" fg:w="52"/><text x="3.1812%" y="271.50">&lt;F a..</text></g><g><title>base64::decode::decode_helper (1 samples, 0.07%)</title><rect x="6.4076%" y="245" width="0.0682%" height="15" fill="rgb(249,55,30)" fg:x="94" fg:w="1"/><text x="6.6576%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.07%)</title><rect x="6.4758%" y="181" width="0.0682%" height="15" fill="rgb(237,47,42)" fg:x="95" fg:w="1"/><text x="6.7258%" y="191.50"></text></g><g><title>age::format::read::header (70 samples, 4.77%)</title><rect x="1.8405%" y="309" width="4.7716%" height="15" fill="rgb(211,20,18)" fg:x="27" fg:w="70"/><text x="2.0905%" y="319.50">age::f..</text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (64 samples, 4.36%)</title><rect x="2.2495%" y="293" width="4.3626%" height="15" fill="rgb(231,203,46)" fg:x="33" fg:w="64"/><text x="2.4995%" y="303.50">&lt;(A,B..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (64 samples, 4.36%)</title><rect x="2.2495%" y="277" width="4.3626%" height="15" fill="rgb(237,142,3)" fg:x="33" fg:w="64"/><text x="2.4995%" y="287.50">&lt;F as..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.14%)</title><rect x="6.4758%" y="261" width="0.1363%" height="15" fill="rgb(241,107,1)" fg:x="95" fg:w="2"/><text x="6.7258%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.14%)</title><rect x="6.4758%" y="245" width="0.1363%" height="15" fill="rgb(229,83,13)" fg:x="95" fg:w="2"/><text x="6.7258%" y="255.50"></text></g><g><title>&lt;age_core::format::Stanza as core::convert::From&lt;age_core::format::AgeStanza&gt;&gt;::from (2 samples, 0.14%)</title><rect x="6.4758%" y="229" width="0.1363%" height="15" fill="rgb(241,91,40)" fg:x="95" fg:w="2"/><text x="6.7258%" y="239.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.14%)</title><rect x="6.4758%" y="213" width="0.1363%" height="15" fill="rgb(225,3,45)" fg:x="95" fg:w="2"/><text x="6.7258%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.14%)</title><rect x="6.4758%" y="197" width="0.1363%" height="15" fill="rgb(244,223,14)" fg:x="95" fg:w="2"/><text x="6.7258%" y="207.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.07%)</title><rect x="6.5440%" y="181" width="0.0682%" height="15" fill="rgb(224,124,37)" fg:x="96" fg:w="1"/><text x="6.7940%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),std::io::error::Error&gt;&gt; (1 samples, 0.07%)</title><rect x="6.5440%" y="165" width="0.0682%" height="15" fill="rgb(251,171,30)" fg:x="96" fg:w="1"/><text x="6.7940%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (1 samples, 0.07%)</title><rect x="6.5440%" y="149" width="0.0682%" height="15" fill="rgb(236,46,54)" fg:x="96" fg:w="1"/><text x="6.7940%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::repr_bitpacked::Repr&gt; (1 samples, 0.07%)</title><rect x="6.5440%" y="133" width="0.0682%" height="15" fill="rgb(245,213,5)" fg:x="96" fg:w="1"/><text x="6.7940%" y="143.50"></text></g><g><title>&lt;std::io::error::repr_bitpacked::Repr as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="6.5440%" y="117" width="0.0682%" height="15" fill="rgb(230,144,27)" fg:x="96" fg:w="1"/><text x="6.7940%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::ErrorData&lt;alloc::boxed::Box&lt;std::io::error::Custom&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="6.5440%" y="101" width="0.0682%" height="15" fill="rgb(220,86,6)" fg:x="96" fg:w="1"/><text x="6.7940%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;std::io::error::Custom&gt;&gt; (1 samples, 0.07%)</title><rect x="6.5440%" y="85" width="0.0682%" height="15" fill="rgb(240,20,13)" fg:x="96" fg:w="1"/><text x="6.7940%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.07%)</title><rect x="6.6121%" y="309" width="0.0682%" height="15" fill="rgb(217,89,34)" fg:x="97" fg:w="1"/><text x="6.8621%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="6.6121%" y="293" width="0.0682%" height="15" fill="rgb(229,13,5)" fg:x="97" fg:w="1"/><text x="6.8621%" y="303.50"></text></g><g><title>age::protocol::Decryptor&lt;R&gt;::new (76 samples, 5.18%)</title><rect x="1.7042%" y="341" width="5.1806%" height="15" fill="rgb(244,67,35)" fg:x="25" fg:w="76"/><text x="1.9542%" y="351.50">age::p..</text></g><g><title>age::format::Header::read (76 samples, 5.18%)</title><rect x="1.7042%" y="325" width="5.1806%" height="15" fill="rgb(221,40,2)" fg:x="25" fg:w="76"/><text x="1.9542%" y="335.50">age::f..</text></g><g><title>std::io::default_read_exact (3 samples, 0.20%)</title><rect x="6.6803%" y="309" width="0.2045%" height="15" fill="rgb(237,157,21)" fg:x="98" fg:w="3"/><text x="6.9303%" y="319.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.20%)</title><rect x="6.6803%" y="293" width="0.2045%" height="15" fill="rgb(222,94,11)" fg:x="98" fg:w="3"/><text x="6.9303%" y="303.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (2 samples, 0.14%)</title><rect x="6.7485%" y="277" width="0.1363%" height="15" fill="rgb(249,113,6)" fg:x="99" fg:w="2"/><text x="6.9985%" y="287.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (2 samples, 0.14%)</title><rect x="6.7485%" y="261" width="0.1363%" height="15" fill="rgb(238,137,36)" fg:x="99" fg:w="2"/><text x="6.9985%" y="271.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (2 samples, 0.14%)</title><rect x="6.7485%" y="245" width="0.1363%" height="15" fill="rgb(210,102,26)" fg:x="99" fg:w="2"/><text x="6.9985%" y="255.50"></text></g><g><title>__read (2 samples, 0.14%)</title><rect x="6.7485%" y="229" width="0.1363%" height="15" fill="rgb(218,30,30)" fg:x="99" fg:w="2"/><text x="6.9985%" y="239.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (6 samples, 0.41%)</title><rect x="6.8848%" y="261" width="0.4090%" height="15" fill="rgb(214,67,26)" fg:x="101" fg:w="6"/><text x="7.1348%" y="271.50"></text></g><g><title>curve25519_dalek::backend::serial::curve_models::&lt;impl core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::curve_models::AffineNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::add (7 samples, 0.48%)</title><rect x="7.2938%" y="261" width="0.4772%" height="15" fill="rgb(251,9,53)" fg:x="107" fg:w="7"/><text x="7.5438%" y="271.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (6 samples, 0.41%)</title><rect x="7.3620%" y="245" width="0.4090%" height="15" fill="rgb(228,204,25)" fg:x="108" fg:w="6"/><text x="7.6120%" y="255.50"></text></g><g><title>curve25519_dalek::edwards::EdwardsBasepointTable::basepoint_mul (19 samples, 1.30%)</title><rect x="6.8848%" y="277" width="1.2952%" height="15" fill="rgb(207,153,8)" fg:x="101" fg:w="19"/><text x="7.1348%" y="287.50"></text></g><g><title>curve25519_dalek::window::LookupTable&lt;T&gt;::select (6 samples, 0.41%)</title><rect x="7.7710%" y="261" width="0.4090%" height="15" fill="rgb(242,9,16)" fg:x="114" fg:w="6"/><text x="8.0210%" y="271.50"></text></g><g><title>&lt;curve25519_dalek::backend::serial::curve_models::AffineNielsPoint as subtle::ConditionallySelectable&gt;::conditional_assign (5 samples, 0.34%)</title><rect x="7.8391%" y="245" width="0.3408%" height="15" fill="rgb(217,211,10)" fg:x="115" fg:w="5"/><text x="8.0891%" y="255.50"></text></g><g><title>&lt;x25519_dalek::x25519::PublicKey as core::convert::From&lt;&amp;x25519_dalek::x25519::EphemeralSecret&gt;&gt;::from (25 samples, 1.70%)</title><rect x="6.8848%" y="293" width="1.7042%" height="15" fill="rgb(219,228,52)" fg:x="101" fg:w="25"/><text x="7.1348%" y="303.50"></text></g><g><title>curve25519_dalek::edwards::EdwardsPoint::to_montgomery (6 samples, 0.41%)</title><rect x="8.1800%" y="277" width="0.4090%" height="15" fill="rgb(231,92,29)" fg:x="120" fg:w="6"/><text x="8.4300%" y="287.50"></text></g><g><title>curve25519_dalek::field::&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::pow22501 (6 samples, 0.41%)</title><rect x="8.1800%" y="261" width="0.4090%" height="15" fill="rgb(232,8,23)" fg:x="120" fg:w="6"/><text x="8.4300%" y="271.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (6 samples, 0.41%)</title><rect x="8.1800%" y="245" width="0.4090%" height="15" fill="rgb(216,211,34)" fg:x="120" fg:w="6"/><text x="8.4300%" y="255.50"></text></g><g><title>hkdf::Hkdf&lt;H,I&gt;::expand (1 samples, 0.07%)</title><rect x="8.5890%" y="277" width="0.0682%" height="15" fill="rgb(236,151,0)" fg:x="126" fg:w="1"/><text x="8.8390%" y="287.50"></text></g><g><title>sha2::sha256::soft::compress (1 samples, 0.07%)</title><rect x="8.5890%" y="261" width="0.0682%" height="15" fill="rgb(209,168,3)" fg:x="126" fg:w="1"/><text x="8.8390%" y="271.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.07%)</title><rect x="8.6571%" y="261" width="0.0682%" height="15" fill="rgb(208,129,28)" fg:x="127" fg:w="1"/><text x="8.9071%" y="271.50"></text></g><g><title>age_core::primitives::hkdf (5 samples, 0.34%)</title><rect x="8.5890%" y="293" width="0.3408%" height="15" fill="rgb(229,78,22)" fg:x="126" fg:w="5"/><text x="8.8390%" y="303.50"></text></g><g><title>hkdf::Hkdf&lt;H,I&gt;::new (4 samples, 0.27%)</title><rect x="8.6571%" y="277" width="0.2727%" height="15" fill="rgb(228,187,13)" fg:x="127" fg:w="4"/><text x="8.9071%" y="287.50"></text></g><g><title>sha2::sha256::soft::compress (3 samples, 0.20%)</title><rect x="8.7253%" y="261" width="0.2045%" height="15" fill="rgb(240,119,24)" fg:x="128" fg:w="3"/><text x="8.9753%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.07%)</title><rect x="8.9298%" y="293" width="0.0682%" height="15" fill="rgb(209,194,42)" fg:x="131" fg:w="1"/><text x="9.1798%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="8.9298%" y="277" width="0.0682%" height="15" fill="rgb(247,200,46)" fg:x="131" fg:w="1"/><text x="9.1798%" y="287.50"></text></g><g><title>__libc_realloc (1 samples, 0.07%)</title><rect x="8.9298%" y="261" width="0.0682%" height="15" fill="rgb(218,76,16)" fg:x="131" fg:w="1"/><text x="9.1798%" y="271.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (32 samples, 2.18%)</title><rect x="9.6796%" y="261" width="2.1813%" height="15" fill="rgb(225,21,48)" fg:x="142" fg:w="32"/><text x="9.9296%" y="271.50">&lt;..</text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (19 samples, 1.30%)</title><rect x="11.8609%" y="261" width="1.2952%" height="15" fill="rgb(239,223,50)" fg:x="174" fg:w="19"/><text x="12.1109%" y="271.50"></text></g><g><title>age::Identity::unwrap_stanzas (95 samples, 6.48%)</title><rect x="6.8848%" y="325" width="6.4758%" height="15" fill="rgb(244,45,21)" fg:x="101" fg:w="95"/><text x="7.1348%" y="335.50">age::Ide..</text></g><g><title>&lt;age::x25519::Identity as age::Identity&gt;::unwrap_stanza (95 samples, 6.48%)</title><rect x="6.8848%" y="309" width="6.4758%" height="15" fill="rgb(232,33,43)" fg:x="101" fg:w="95"/><text x="7.1348%" y="319.50">&lt;age::x2..</text></g><g><title>x25519_dalek::x25519::StaticSecret::diffie_hellman (64 samples, 4.36%)</title><rect x="8.9980%" y="293" width="4.3626%" height="15" fill="rgb(209,8,3)" fg:x="132" fg:w="64"/><text x="9.2480%" y="303.50">x2551..</text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (64 samples, 4.36%)</title><rect x="8.9980%" y="277" width="4.3626%" height="15" fill="rgb(214,25,53)" fg:x="132" fg:w="64"/><text x="9.2480%" y="287.50">&lt;&amp;cur..</text></g><g><title>curve25519_dalek::field::&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::pow22501 (3 samples, 0.20%)</title><rect x="13.1561%" y="261" width="0.2045%" height="15" fill="rgb(254,186,54)" fg:x="193" fg:w="3"/><text x="13.4061%" y="271.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (3 samples, 0.20%)</title><rect x="13.1561%" y="245" width="0.2045%" height="15" fill="rgb(208,174,49)" fg:x="193" fg:w="3"/><text x="13.4061%" y="255.50"></text></g><g><title>age::primitives::HmacWriter::new (2 samples, 0.14%)</title><rect x="13.3606%" y="293" width="0.1363%" height="15" fill="rgb(233,191,51)" fg:x="196" fg:w="2"/><text x="13.6106%" y="303.50"></text></g><g><title>sha2::sha256::soft::compress (2 samples, 0.14%)</title><rect x="13.3606%" y="277" width="0.1363%" height="15" fill="rgb(222,134,10)" fg:x="196" fg:w="2"/><text x="13.6106%" y="287.50"></text></g><g><title>age::format::HeaderV1::verify_mac (5 samples, 0.34%)</title><rect x="13.3606%" y="309" width="0.3408%" height="15" fill="rgb(230,226,20)" fg:x="196" fg:w="5"/><text x="13.6106%" y="319.50"></text></g><g><title>sha2::sha256::soft::compress (3 samples, 0.20%)</title><rect x="13.4969%" y="293" width="0.2045%" height="15" fill="rgb(251,111,25)" fg:x="198" fg:w="3"/><text x="13.7469%" y="303.50"></text></g><g><title>generic_array::GenericArray&lt;T,N&gt;::from_exact_iter (1 samples, 0.07%)</title><rect x="13.7014%" y="277" width="0.0682%" height="15" fill="rgb(224,40,46)" fg:x="201" fg:w="1"/><text x="13.9514%" y="287.50"></text></g><g><title>age::keys::v1_payload_key (11 samples, 0.75%)</title><rect x="13.3606%" y="325" width="0.7498%" height="15" fill="rgb(236,108,47)" fg:x="196" fg:w="11"/><text x="13.6106%" y="335.50"></text></g><g><title>age_core::primitives::hkdf (6 samples, 0.41%)</title><rect x="13.7014%" y="309" width="0.4090%" height="15" fill="rgb(234,93,0)" fg:x="201" fg:w="6"/><text x="13.9514%" y="319.50"></text></g><g><title>hkdf::Hkdf&lt;H,I&gt;::new (6 samples, 0.41%)</title><rect x="13.7014%" y="293" width="0.4090%" height="15" fill="rgb(224,213,32)" fg:x="201" fg:w="6"/><text x="13.9514%" y="303.50"></text></g><g><title>sha2::sha256::soft::compress (5 samples, 0.34%)</title><rect x="13.7696%" y="277" width="0.3408%" height="15" fill="rgb(251,11,48)" fg:x="202" fg:w="5"/><text x="14.0196%" y="287.50"></text></g><g><title>age::protocol::decryptor::RecipientsDecryptor&lt;R&gt;::decrypt (108 samples, 7.36%)</title><rect x="6.8848%" y="341" width="7.3620%" height="15" fill="rgb(236,173,5)" fg:x="101" fg:w="108"/><text x="7.1348%" y="351.50">age::proto..</text></g><g><title>age::primitives::stream::Stream::decrypt (2 samples, 0.14%)</title><rect x="14.1104%" y="325" width="0.1363%" height="15" fill="rgb(230,95,12)" fg:x="207" fg:w="2"/><text x="14.3604%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;age::primitives::stream::StreamReader&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;&gt;&gt; (2 samples, 0.14%)</title><rect x="14.2468%" y="341" width="0.1363%" height="15" fill="rgb(232,209,1)" fg:x="209" fg:w="2"/><text x="14.4968%" y="351.50"></text></g><g><title>close (2 samples, 0.14%)</title><rect x="14.2468%" y="325" width="0.1363%" height="15" fill="rgb(232,6,1)" fg:x="209" fg:w="2"/><text x="14.4968%" y="335.50"></text></g><g><title>&lt;flate2::zio::Writer&lt;W,D&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.75%)</title><rect x="14.3831%" y="325" width="0.7498%" height="15" fill="rgb(210,224,50)" fg:x="211" fg:w="11"/><text x="14.6331%" y="335.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::dump (11 samples, 0.75%)</title><rect x="14.3831%" y="309" width="0.7498%" height="15" fill="rgb(228,127,35)" fg:x="211" fg:w="11"/><text x="14.6331%" y="319.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (11 samples, 0.75%)</title><rect x="14.3831%" y="293" width="0.7498%" height="15" fill="rgb(245,102,45)" fg:x="211" fg:w="11"/><text x="14.6331%" y="303.50"></text></g><g><title>std::sys::unix::net::Socket::write (11 samples, 0.75%)</title><rect x="14.3831%" y="277" width="0.7498%" height="15" fill="rgb(214,1,49)" fg:x="211" fg:w="11"/><text x="14.6331%" y="287.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (11 samples, 0.75%)</title><rect x="14.3831%" y="261" width="0.7498%" height="15" fill="rgb(226,163,40)" fg:x="211" fg:w="11"/><text x="14.6331%" y="271.50"></text></g><g><title>__write (11 samples, 0.75%)</title><rect x="14.3831%" y="245" width="0.7498%" height="15" fill="rgb(239,212,28)" fg:x="211" fg:w="11"/><text x="14.6331%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::gz::write::GzDecoder&lt;std::fs::File&gt;&gt; (13 samples, 0.89%)</title><rect x="14.3831%" y="341" width="0.8862%" height="15" fill="rgb(220,20,13)" fg:x="211" fg:w="13"/><text x="14.6331%" y="351.50"></text></g><g><title>close (2 samples, 0.14%)</title><rect x="15.1329%" y="325" width="0.1363%" height="15" fill="rgb(210,164,35)" fg:x="222" fg:w="2"/><text x="15.3829%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.07%)</title><rect x="15.2693%" y="325" width="0.0682%" height="15" fill="rgb(248,109,41)" fg:x="224" fg:w="1"/><text x="15.5193%" y="335.50"></text></g><g><title>flate2::gz::write::GzDecoder&lt;W&gt;::new (2 samples, 0.14%)</title><rect x="15.2693%" y="341" width="0.1363%" height="15" fill="rgb(238,23,50)" fg:x="224" fg:w="2"/><text x="15.5193%" y="351.50"></text></g><g><title>flate2::mem::Decompress::new (1 samples, 0.07%)</title><rect x="15.3374%" y="325" width="0.0682%" height="15" fill="rgb(211,48,49)" fg:x="225" fg:w="1"/><text x="15.5874%" y="335.50"></text></g><g><title>miniz_oxide::inflate::stream::InflateState::new_boxed (1 samples, 0.07%)</title><rect x="15.3374%" y="309" width="0.0682%" height="15" fill="rgb(223,36,21)" fg:x="225" fg:w="1"/><text x="15.5874%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.07%)</title><rect x="15.3374%" y="293" width="0.0682%" height="15" fill="rgb(207,123,46)" fg:x="225" fg:w="1"/><text x="15.5874%" y="303.50"></text></g><g><title>std::fs::File::create (7 samples, 0.48%)</title><rect x="15.4056%" y="341" width="0.4772%" height="15" fill="rgb(240,218,32)" fg:x="226" fg:w="7"/><text x="15.6556%" y="351.50"></text></g><g><title>std::fs::OpenOptions::_open (7 samples, 0.48%)</title><rect x="15.4056%" y="325" width="0.4772%" height="15" fill="rgb(252,5,43)" fg:x="226" fg:w="7"/><text x="15.6556%" y="335.50"></text></g><g><title>std::sys::unix::fs::File::open (7 samples, 0.48%)</title><rect x="15.4056%" y="309" width="0.4772%" height="15" fill="rgb(252,84,19)" fg:x="226" fg:w="7"/><text x="15.6556%" y="319.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (7 samples, 0.48%)</title><rect x="15.4056%" y="293" width="0.4772%" height="15" fill="rgb(243,152,39)" fg:x="226" fg:w="7"/><text x="15.6556%" y="303.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (7 samples, 0.48%)</title><rect x="15.4056%" y="277" width="0.4772%" height="15" fill="rgb(234,160,15)" fg:x="226" fg:w="7"/><text x="15.6556%" y="287.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (7 samples, 0.48%)</title><rect x="15.4056%" y="261" width="0.4772%" height="15" fill="rgb(237,34,20)" fg:x="226" fg:w="7"/><text x="15.6556%" y="271.50"></text></g><g><title>std::sys::unix::fs::File::open_c (7 samples, 0.48%)</title><rect x="15.4056%" y="245" width="0.4772%" height="15" fill="rgb(229,97,13)" fg:x="226" fg:w="7"/><text x="15.6556%" y="255.50"></text></g><g><title>std::sys::unix::cvt_r (7 samples, 0.48%)</title><rect x="15.4056%" y="229" width="0.4772%" height="15" fill="rgb(234,71,50)" fg:x="226" fg:w="7"/><text x="15.6556%" y="239.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (7 samples, 0.48%)</title><rect x="15.4056%" y="213" width="0.4772%" height="15" fill="rgb(253,155,4)" fg:x="226" fg:w="7"/><text x="15.6556%" y="223.50"></text></g><g><title>__libc_open64 (7 samples, 0.48%)</title><rect x="15.4056%" y="197" width="0.4772%" height="15" fill="rgb(222,185,37)" fg:x="226" fg:w="7"/><text x="15.6556%" y="207.50"></text></g><g><title>std::fs::File::open (3 samples, 0.20%)</title><rect x="15.8828%" y="341" width="0.2045%" height="15" fill="rgb(251,177,13)" fg:x="233" fg:w="3"/><text x="16.1328%" y="351.50"></text></g><g><title>std::fs::OpenOptions::_open (3 samples, 0.20%)</title><rect x="15.8828%" y="325" width="0.2045%" height="15" fill="rgb(250,179,40)" fg:x="233" fg:w="3"/><text x="16.1328%" y="335.50"></text></g><g><title>std::sys::unix::fs::File::open (3 samples, 0.20%)</title><rect x="15.8828%" y="309" width="0.2045%" height="15" fill="rgb(242,44,2)" fg:x="233" fg:w="3"/><text x="16.1328%" y="319.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.20%)</title><rect x="15.8828%" y="293" width="0.2045%" height="15" fill="rgb(216,177,13)" fg:x="233" fg:w="3"/><text x="16.1328%" y="303.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.20%)</title><rect x="15.8828%" y="277" width="0.2045%" height="15" fill="rgb(216,106,43)" fg:x="233" fg:w="3"/><text x="16.1328%" y="287.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (3 samples, 0.20%)</title><rect x="15.8828%" y="261" width="0.2045%" height="15" fill="rgb(216,183,2)" fg:x="233" fg:w="3"/><text x="16.1328%" y="271.50"></text></g><g><title>std::sys::unix::fs::File::open_c (3 samples, 0.20%)</title><rect x="15.8828%" y="245" width="0.2045%" height="15" fill="rgb(249,75,3)" fg:x="233" fg:w="3"/><text x="16.1328%" y="255.50"></text></g><g><title>std::sys::unix::cvt_r (3 samples, 0.20%)</title><rect x="15.8828%" y="229" width="0.2045%" height="15" fill="rgb(219,67,39)" fg:x="233" fg:w="3"/><text x="16.1328%" y="239.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (3 samples, 0.20%)</title><rect x="15.8828%" y="213" width="0.2045%" height="15" fill="rgb(253,228,2)" fg:x="233" fg:w="3"/><text x="16.1328%" y="223.50"></text></g><g><title>__libc_open64 (2 samples, 0.14%)</title><rect x="15.9509%" y="197" width="0.1363%" height="15" fill="rgb(235,138,27)" fg:x="234" fg:w="2"/><text x="16.2009%" y="207.50"></text></g><g><title>&lt;age::primitives::stream::StreamReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.07%)</title><rect x="16.1554%" y="325" width="0.0682%" height="15" fill="rgb(236,97,51)" fg:x="237" fg:w="1"/><text x="16.4054%" y="335.50"></text></g><g><title>age::primitives::stream::Stream::decrypt_chunk (1 samples, 0.07%)</title><rect x="16.1554%" y="309" width="0.0682%" height="15" fill="rgb(240,80,30)" fg:x="237" fg:w="1"/><text x="16.4054%" y="319.50"></text></g><g><title>&lt;Alg as aead::Aead&gt;::decrypt (1 samples, 0.07%)</title><rect x="16.1554%" y="293" width="0.0682%" height="15" fill="rgb(230,178,19)" fg:x="237" fg:w="1"/><text x="16.4054%" y="303.50"></text></g><g><title>chacha20poly1305::cipher::Cipher&lt;C&gt;::decrypt_in_place_detached (1 samples, 0.07%)</title><rect x="16.1554%" y="277" width="0.0682%" height="15" fill="rgb(210,190,27)" fg:x="237" fg:w="1"/><text x="16.4054%" y="287.50"></text></g><g><title>cipher::stream::StreamCipher::apply_keystream (1 samples, 0.07%)</title><rect x="16.1554%" y="261" width="0.0682%" height="15" fill="rgb(222,107,31)" fg:x="237" fg:w="1"/><text x="16.4054%" y="271.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (1 samples, 0.07%)</title><rect x="16.1554%" y="245" width="0.0682%" height="15" fill="rgb(216,127,34)" fg:x="237" fg:w="1"/><text x="16.4054%" y="255.50"></text></g><g><title>chacha20::backends::soft::quarter_round (1 samples, 0.07%)</title><rect x="16.1554%" y="229" width="0.0682%" height="15" fill="rgb(234,116,52)" fg:x="237" fg:w="1"/><text x="16.4054%" y="239.50"></text></g><g><title>std::io::copy::stack_buffer_copy (7 samples, 0.48%)</title><rect x="16.0873%" y="341" width="0.4772%" height="15" fill="rgb(222,124,15)" fg:x="236" fg:w="7"/><text x="16.3373%" y="351.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.34%)</title><rect x="16.2236%" y="325" width="0.3408%" height="15" fill="rgb(231,179,28)" fg:x="238" fg:w="5"/><text x="16.4736%" y="335.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::write_with_status (5 samples, 0.34%)</title><rect x="16.2236%" y="309" width="0.3408%" height="15" fill="rgb(226,93,45)" fg:x="238" fg:w="5"/><text x="16.4736%" y="319.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run_vec (5 samples, 0.34%)</title><rect x="16.2236%" y="293" width="0.3408%" height="15" fill="rgb(215,8,51)" fg:x="238" fg:w="5"/><text x="16.4736%" y="303.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (5 samples, 0.34%)</title><rect x="16.2236%" y="277" width="0.3408%" height="15" fill="rgb(223,106,5)" fg:x="238" fg:w="5"/><text x="16.4736%" y="287.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (5 samples, 0.34%)</title><rect x="16.2236%" y="261" width="0.3408%" height="15" fill="rgb(250,191,5)" fg:x="238" fg:w="5"/><text x="16.4736%" y="271.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (5 samples, 0.34%)</title><rect x="16.2236%" y="245" width="0.3408%" height="15" fill="rgb(242,132,44)" fg:x="238" fg:w="5"/><text x="16.4736%" y="255.50"></text></g><g><title>miniz_oxide::inflate::core::init_tree (5 samples, 0.34%)</title><rect x="16.2236%" y="229" width="0.3408%" height="15" fill="rgb(251,152,29)" fg:x="238" fg:w="5"/><text x="16.4736%" y="239.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="16.5644%" y="325" width="0.0682%" height="15" fill="rgb(218,179,5)" fg:x="243" fg:w="1"/><text x="16.8144%" y="335.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (5 samples, 0.34%)</title><rect x="16.6326%" y="293" width="0.3408%" height="15" fill="rgb(227,67,19)" fg:x="244" fg:w="5"/><text x="16.8826%" y="303.50"></text></g><g><title>syscall (5 samples, 0.34%)</title><rect x="16.6326%" y="277" width="0.3408%" height="15" fill="rgb(233,119,31)" fg:x="244" fg:w="5"/><text x="16.8826%" y="287.50"></text></g><g><title>&lt;tokio_stream::stream_ext::collect::Collect&lt;T,U&gt; as core::future::future::Future&gt;::poll (226 samples, 15.41%)</title><rect x="1.6360%" y="373" width="15.4056%" height="15" fill="rgb(241,120,22)" fg:x="24" fg:w="226"/><text x="1.8860%" y="383.50">&lt;tokio_stream::stream_ex..</text></g><g><title>&lt;tokio_stream::stream_ext::then::Then&lt;St,Fut,F&gt; as futures_core::stream::Stream&gt;::poll_next (226 samples, 15.41%)</title><rect x="1.6360%" y="357" width="15.4056%" height="15" fill="rgb(224,102,30)" fg:x="24" fg:w="226"/><text x="1.8860%" y="367.50">&lt;tokio_stream::stream_ex..</text></g><g><title>tokio::fs::create_dir_all::create_dir_all::{{closure}} (7 samples, 0.48%)</title><rect x="16.5644%" y="341" width="0.4772%" height="15" fill="rgb(210,164,37)" fg:x="243" fg:w="7"/><text x="16.8144%" y="351.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (6 samples, 0.41%)</title><rect x="16.6326%" y="325" width="0.4090%" height="15" fill="rgb(226,191,16)" fg:x="244" fg:w="6"/><text x="16.8826%" y="335.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (6 samples, 0.41%)</title><rect x="16.6326%" y="309" width="0.4090%" height="15" fill="rgb(214,40,45)" fg:x="244" fg:w="6"/><text x="16.8826%" y="319.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (1 samples, 0.07%)</title><rect x="16.9734%" y="293" width="0.0682%" height="15" fill="rgb(244,29,26)" fg:x="249" fg:w="1"/><text x="17.2234%" y="303.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (139 samples, 9.48%)</title><rect x="17.2461%" y="261" width="9.4751%" height="15" fill="rgb(216,16,5)" fg:x="253" fg:w="139"/><text x="17.4961%" y="271.50">&lt;serde_json::r..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (139 samples, 9.48%)</title><rect x="17.2461%" y="245" width="9.4751%" height="15" fill="rgb(249,76,35)" fg:x="253" fg:w="139"/><text x="17.4961%" y="255.50">&lt;std::io::Byte..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (139 samples, 9.48%)</title><rect x="17.2461%" y="229" width="9.4751%" height="15" fill="rgb(207,11,44)" fg:x="253" fg:w="139"/><text x="17.4961%" y="239.50">&lt;std::fs::File..</text></g><g><title>std::sys::unix::fs::File::read (139 samples, 9.48%)</title><rect x="17.2461%" y="213" width="9.4751%" height="15" fill="rgb(228,190,49)" fg:x="253" fg:w="139"/><text x="17.4961%" y="223.50">std::sys::unix..</text></g><g><title>std::sys::unix::fd::FileDesc::read (139 samples, 9.48%)</title><rect x="17.2461%" y="197" width="9.4751%" height="15" fill="rgb(214,173,12)" fg:x="253" fg:w="139"/><text x="17.4961%" y="207.50">std::sys::unix..</text></g><g><title>__read (139 samples, 9.48%)</title><rect x="17.2461%" y="181" width="9.4751%" height="15" fill="rgb(218,26,35)" fg:x="253" fg:w="139"/><text x="17.4961%" y="191.50">__read</text></g><g><title>__pthread_disable_asynccancel (1 samples, 0.07%)</title><rect x="26.6530%" y="165" width="0.0682%" height="15" fill="rgb(220,200,19)" fg:x="391" fg:w="1"/><text x="26.9030%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (141 samples, 9.61%)</title><rect x="17.1779%" y="277" width="9.6115%" height="15" fill="rgb(239,95,49)" fg:x="252" fg:w="141"/><text x="17.4279%" y="287.50">&lt;&amp;mut serde_js..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.07%)</title><rect x="26.7212%" y="261" width="0.0682%" height="15" fill="rgb(235,85,53)" fg:x="392" fg:w="1"/><text x="26.9712%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.07%)</title><rect x="26.7212%" y="245" width="0.0682%" height="15" fill="rgb(233,133,31)" fg:x="392" fg:w="1"/><text x="26.9712%" y="255.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.07%)</title><rect x="26.7212%" y="229" width="0.0682%" height="15" fill="rgb(218,25,20)" fg:x="392" fg:w="1"/><text x="26.9712%" y="239.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.07%)</title><rect x="26.7212%" y="213" width="0.0682%" height="15" fill="rgb(252,210,38)" fg:x="392" fg:w="1"/><text x="26.9712%" y="223.50"></text></g><g><title>__read (1 samples, 0.07%)</title><rect x="26.7212%" y="197" width="0.0682%" height="15" fill="rgb(242,134,21)" fg:x="392" fg:w="1"/><text x="26.9712%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_unit (9 samples, 0.61%)</title><rect x="26.7894%" y="261" width="0.6135%" height="15" fill="rgb(213,28,48)" fg:x="393" fg:w="9"/><text x="27.0394%" y="271.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.61%)</title><rect x="26.7894%" y="245" width="0.6135%" height="15" fill="rgb(250,196,2)" fg:x="393" fg:w="9"/><text x="27.0394%" y="255.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (8 samples, 0.55%)</title><rect x="26.8575%" y="229" width="0.5453%" height="15" fill="rgb(227,5,17)" fg:x="394" fg:w="8"/><text x="27.1075%" y="239.50"></text></g><g><title>std::sys::unix::fs::File::read (8 samples, 0.55%)</title><rect x="26.8575%" y="213" width="0.5453%" height="15" fill="rgb(221,226,24)" fg:x="394" fg:w="8"/><text x="27.1075%" y="223.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (8 samples, 0.55%)</title><rect x="26.8575%" y="197" width="0.5453%" height="15" fill="rgb(211,5,48)" fg:x="394" fg:w="8"/><text x="27.1075%" y="207.50"></text></g><g><title>__read (8 samples, 0.55%)</title><rect x="26.8575%" y="181" width="0.5453%" height="15" fill="rgb(219,150,6)" fg:x="394" fg:w="8"/><text x="27.1075%" y="191.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.14%)</title><rect x="27.4029%" y="245" width="0.1363%" height="15" fill="rgb(251,46,16)" fg:x="402" fg:w="2"/><text x="27.6529%" y="255.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.14%)</title><rect x="27.4029%" y="229" width="0.1363%" height="15" fill="rgb(220,204,40)" fg:x="402" fg:w="2"/><text x="27.6529%" y="239.50"></text></g><g><title>std::sys::unix::fs::File::read (2 samples, 0.14%)</title><rect x="27.4029%" y="213" width="0.1363%" height="15" fill="rgb(211,85,2)" fg:x="402" fg:w="2"/><text x="27.6529%" y="223.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (2 samples, 0.14%)</title><rect x="27.4029%" y="197" width="0.1363%" height="15" fill="rgb(229,17,7)" fg:x="402" fg:w="2"/><text x="27.6529%" y="207.50"></text></g><g><title>__read (2 samples, 0.14%)</title><rect x="27.4029%" y="181" width="0.1363%" height="15" fill="rgb(239,72,28)" fg:x="402" fg:w="2"/><text x="27.6529%" y="191.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.20%)</title><rect x="27.4029%" y="261" width="0.2045%" height="15" fill="rgb(230,47,54)" fg:x="402" fg:w="3"/><text x="27.6529%" y="271.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.07%)</title><rect x="27.5392%" y="245" width="0.0682%" height="15" fill="rgb(214,50,8)" fg:x="404" fg:w="1"/><text x="27.7892%" y="255.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.07%)</title><rect x="27.5392%" y="229" width="0.0682%" height="15" fill="rgb(216,198,43)" fg:x="404" fg:w="1"/><text x="27.7892%" y="239.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.07%)</title><rect x="27.5392%" y="213" width="0.0682%" height="15" fill="rgb(234,20,35)" fg:x="404" fg:w="1"/><text x="27.7892%" y="223.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.07%)</title><rect x="27.5392%" y="197" width="0.0682%" height="15" fill="rgb(254,45,19)" fg:x="404" fg:w="1"/><text x="27.7892%" y="207.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.07%)</title><rect x="27.5392%" y="181" width="0.0682%" height="15" fill="rgb(219,14,44)" fg:x="404" fg:w="1"/><text x="27.7892%" y="191.50"></text></g><g><title>__read (1 samples, 0.07%)</title><rect x="27.5392%" y="165" width="0.0682%" height="15" fill="rgb(217,220,26)" fg:x="404" fg:w="1"/><text x="27.7892%" y="175.50"></text></g><g><title>__pthread_disable_asynccancel (1 samples, 0.07%)</title><rect x="32.1063%" y="165" width="0.0682%" height="15" fill="rgb(213,158,28)" fg:x="471" fg:w="1"/><text x="32.3563%" y="175.50"></text></g><g><title>__aarch64_cas4_acq (1 samples, 0.07%)</title><rect x="32.1063%" y="149" width="0.0682%" height="15" fill="rgb(252,51,52)" fg:x="471" fg:w="1"/><text x="32.3563%" y="159.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (68 samples, 4.64%)</title><rect x="27.6074%" y="261" width="4.6353%" height="15" fill="rgb(246,89,16)" fg:x="405" fg:w="68"/><text x="27.8574%" y="271.50">&lt;serd..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 4.64%)</title><rect x="27.6074%" y="245" width="4.6353%" height="15" fill="rgb(216,158,49)" fg:x="405" fg:w="68"/><text x="27.8574%" y="255.50">&lt;std:..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (67 samples, 4.57%)</title><rect x="27.6755%" y="229" width="4.5671%" height="15" fill="rgb(236,107,19)" fg:x="406" fg:w="67"/><text x="27.9255%" y="239.50">&lt;std:..</text></g><g><title>std::sys::unix::fs::File::read (67 samples, 4.57%)</title><rect x="27.6755%" y="213" width="4.5671%" height="15" fill="rgb(228,185,30)" fg:x="406" fg:w="67"/><text x="27.9255%" y="223.50">std::..</text></g><g><title>std::sys::unix::fd::FileDesc::read (67 samples, 4.57%)</title><rect x="27.6755%" y="197" width="4.5671%" height="15" fill="rgb(246,134,8)" fg:x="406" fg:w="67"/><text x="27.9255%" y="207.50">std::..</text></g><g><title>__read (67 samples, 4.57%)</title><rect x="27.6755%" y="181" width="4.5671%" height="15" fill="rgb(214,143,50)" fg:x="406" fg:w="67"/><text x="27.9255%" y="191.50">__read</text></g><g><title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="32.1745%" y="165" width="0.0682%" height="15" fill="rgb(228,75,8)" fg:x="472" fg:w="1"/><text x="32.4245%" y="175.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 6.27%)</title><rect x="32.2427%" y="261" width="6.2713%" height="15" fill="rgb(207,175,4)" fg:x="473" fg:w="92"/><text x="32.4927%" y="271.50">&lt;std::io..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (91 samples, 6.20%)</title><rect x="32.3108%" y="245" width="6.2031%" height="15" fill="rgb(205,108,24)" fg:x="474" fg:w="91"/><text x="32.5608%" y="255.50">&lt;std::fs..</text></g><g><title>std::sys::unix::fs::File::read (91 samples, 6.20%)</title><rect x="32.3108%" y="229" width="6.2031%" height="15" fill="rgb(244,120,49)" fg:x="474" fg:w="91"/><text x="32.5608%" y="239.50">std::sys..</text></g><g><title>std::sys::unix::fd::FileDesc::read (91 samples, 6.20%)</title><rect x="32.3108%" y="213" width="6.2031%" height="15" fill="rgb(223,47,38)" fg:x="474" fg:w="91"/><text x="32.5608%" y="223.50">std::sys..</text></g><g><title>__read (91 samples, 6.20%)</title><rect x="32.3108%" y="197" width="6.2031%" height="15" fill="rgb(229,179,11)" fg:x="474" fg:w="91"/><text x="32.5608%" y="207.50">__read</text></g><g><title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="38.4458%" y="181" width="0.0682%" height="15" fill="rgb(231,122,1)" fg:x="564" fg:w="1"/><text x="38.6958%" y="191.50"></text></g><g><title>__aarch64_cas4_acq (1 samples, 0.07%)</title><rect x="38.4458%" y="165" width="0.0682%" height="15" fill="rgb(245,119,9)" fg:x="564" fg:w="1"/><text x="38.6958%" y="175.50"></text></g><g><title>dataprep_pipelines::types::spider::_::&lt;impl serde::de::Deserialize for dataprep_pipelines::types::spider::FileType&gt;::deserialize (8 samples, 0.55%)</title><rect x="38.5140%" y="261" width="0.5453%" height="15" fill="rgb(241,163,25)" fg:x="565" fg:w="8"/><text x="38.7640%" y="271.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.55%)</title><rect x="38.5140%" y="245" width="0.5453%" height="15" fill="rgb(217,214,3)" fg:x="565" fg:w="8"/><text x="38.7640%" y="255.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (8 samples, 0.55%)</title><rect x="38.5140%" y="229" width="0.5453%" height="15" fill="rgb(240,86,28)" fg:x="565" fg:w="8"/><text x="38.7640%" y="239.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.55%)</title><rect x="38.5140%" y="213" width="0.5453%" height="15" fill="rgb(215,47,9)" fg:x="565" fg:w="8"/><text x="38.7640%" y="223.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (8 samples, 0.55%)</title><rect x="38.5140%" y="197" width="0.5453%" height="15" fill="rgb(252,25,45)" fg:x="565" fg:w="8"/><text x="38.7640%" y="207.50"></text></g><g><title>std::sys::unix::fs::File::read (8 samples, 0.55%)</title><rect x="38.5140%" y="181" width="0.5453%" height="15" fill="rgb(251,164,9)" fg:x="565" fg:w="8"/><text x="38.7640%" y="191.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (8 samples, 0.55%)</title><rect x="38.5140%" y="165" width="0.5453%" height="15" fill="rgb(233,194,0)" fg:x="565" fg:w="8"/><text x="38.7640%" y="175.50"></text></g><g><title>__read (8 samples, 0.55%)</title><rect x="38.5140%" y="149" width="0.5453%" height="15" fill="rgb(249,111,24)" fg:x="565" fg:w="8"/><text x="38.7640%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (196 samples, 13.36%)</title><rect x="26.7894%" y="277" width="13.3606%" height="15" fill="rgb(250,223,3)" fg:x="393" fg:w="196"/><text x="27.0394%" y="287.50">&lt;&amp;mut serde_json::de..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_ident (16 samples, 1.09%)</title><rect x="39.0593%" y="261" width="1.0907%" height="15" fill="rgb(236,178,37)" fg:x="573" fg:w="16"/><text x="39.3093%" y="271.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 1.09%)</title><rect x="39.0593%" y="245" width="1.0907%" height="15" fill="rgb(241,158,50)" fg:x="573" fg:w="16"/><text x="39.3093%" y="255.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (16 samples, 1.09%)</title><rect x="39.0593%" y="229" width="1.0907%" height="15" fill="rgb(213,121,41)" fg:x="573" fg:w="16"/><text x="39.3093%" y="239.50"></text></g><g><title>std::sys::unix::fs::File::read (16 samples, 1.09%)</title><rect x="39.0593%" y="213" width="1.0907%" height="15" fill="rgb(240,92,3)" fg:x="573" fg:w="16"/><text x="39.3093%" y="223.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (16 samples, 1.09%)</title><rect x="39.0593%" y="197" width="1.0907%" height="15" fill="rgb(205,123,3)" fg:x="573" fg:w="16"/><text x="39.3093%" y="207.50"></text></g><g><title>__read (16 samples, 1.09%)</title><rect x="39.0593%" y="181" width="1.0907%" height="15" fill="rgb(205,97,47)" fg:x="573" fg:w="16"/><text x="39.3093%" y="191.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (89 samples, 6.07%)</title><rect x="40.1500%" y="277" width="6.0668%" height="15" fill="rgb(247,152,14)" fg:x="589" fg:w="89"/><text x="40.4000%" y="287.50">&lt;serde_j..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 6.00%)</title><rect x="40.2181%" y="261" width="5.9986%" height="15" fill="rgb(248,195,53)" fg:x="590" fg:w="88"/><text x="40.4681%" y="271.50">&lt;std::io..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (88 samples, 6.00%)</title><rect x="40.2181%" y="245" width="5.9986%" height="15" fill="rgb(226,201,16)" fg:x="590" fg:w="88"/><text x="40.4681%" y="255.50">&lt;std::fs..</text></g><g><title>std::sys::unix::fs::File::read (88 samples, 6.00%)</title><rect x="40.2181%" y="229" width="5.9986%" height="15" fill="rgb(205,98,0)" fg:x="590" fg:w="88"/><text x="40.4681%" y="239.50">std::sys..</text></g><g><title>std::sys::unix::fd::FileDesc::read (88 samples, 6.00%)</title><rect x="40.2181%" y="213" width="5.9986%" height="15" fill="rgb(214,191,48)" fg:x="590" fg:w="88"/><text x="40.4681%" y="223.50">std::sys..</text></g><g><title>__read (88 samples, 6.00%)</title><rect x="40.2181%" y="197" width="5.9986%" height="15" fill="rgb(237,112,39)" fg:x="590" fg:w="88"/><text x="40.4681%" y="207.50">__read</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (488 samples, 33.27%)</title><rect x="17.0416%" y="293" width="33.2652%" height="15" fill="rgb(247,203,27)" fg:x="250" fg:w="488"/><text x="17.2916%" y="303.50">&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::De..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 4.09%)</title><rect x="46.2168%" y="277" width="4.0900%" height="15" fill="rgb(235,124,28)" fg:x="678" fg:w="60"/><text x="46.4668%" y="287.50">&lt;std..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (60 samples, 4.09%)</title><rect x="46.2168%" y="261" width="4.0900%" height="15" fill="rgb(208,207,46)" fg:x="678" fg:w="60"/><text x="46.4668%" y="271.50">&lt;std..</text></g><g><title>std::sys::unix::fs::File::read (60 samples, 4.09%)</title><rect x="46.2168%" y="245" width="4.0900%" height="15" fill="rgb(234,176,4)" fg:x="678" fg:w="60"/><text x="46.4668%" y="255.50">std:..</text></g><g><title>std::sys::unix::fd::FileDesc::read (60 samples, 4.09%)</title><rect x="46.2168%" y="229" width="4.0900%" height="15" fill="rgb(230,133,28)" fg:x="678" fg:w="60"/><text x="46.4668%" y="239.50">std:..</text></g><g><title>__read (60 samples, 4.09%)</title><rect x="46.2168%" y="213" width="4.0900%" height="15" fill="rgb(211,137,40)" fg:x="678" fg:w="60"/><text x="46.4668%" y="223.50">__re..</text></g><g><title>__pthread_disable_asynccancel (1 samples, 0.07%)</title><rect x="50.2386%" y="197" width="0.0682%" height="15" fill="rgb(254,35,13)" fg:x="737" fg:w="1"/><text x="50.4886%" y="207.50"></text></g><g><title>__pthread_disable_asynccancel (1 samples, 0.07%)</title><rect x="52.3517%" y="197" width="0.0682%" height="15" fill="rgb(225,49,51)" fg:x="768" fg:w="1"/><text x="52.6017%" y="207.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (32 samples, 2.18%)</title><rect x="50.3067%" y="293" width="2.1813%" height="15" fill="rgb(251,10,15)" fg:x="738" fg:w="32"/><text x="50.5567%" y="303.50">&lt;..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 2.18%)</title><rect x="50.3067%" y="277" width="2.1813%" height="15" fill="rgb(228,207,15)" fg:x="738" fg:w="32"/><text x="50.5567%" y="287.50">&lt;..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (32 samples, 2.18%)</title><rect x="50.3067%" y="261" width="2.1813%" height="15" fill="rgb(241,99,19)" fg:x="738" fg:w="32"/><text x="50.5567%" y="271.50">&lt;..</text></g><g><title>std::sys::unix::fs::File::read (32 samples, 2.18%)</title><rect x="50.3067%" y="245" width="2.1813%" height="15" fill="rgb(207,104,49)" fg:x="738" fg:w="32"/><text x="50.5567%" y="255.50">s..</text></g><g><title>std::sys::unix::fd::FileDesc::read (32 samples, 2.18%)</title><rect x="50.3067%" y="229" width="2.1813%" height="15" fill="rgb(234,99,18)" fg:x="738" fg:w="32"/><text x="50.5567%" y="239.50">s..</text></g><g><title>__read (32 samples, 2.18%)</title><rect x="50.3067%" y="213" width="2.1813%" height="15" fill="rgb(213,191,49)" fg:x="738" fg:w="32"/><text x="50.5567%" y="223.50">_..</text></g><g><title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="52.4199%" y="197" width="0.0682%" height="15" fill="rgb(210,226,19)" fg:x="769" fg:w="1"/><text x="52.6699%" y="207.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 1.16%)</title><rect x="52.4881%" y="293" width="1.1588%" height="15" fill="rgb(229,97,18)" fg:x="770" fg:w="17"/><text x="52.7381%" y="303.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (17 samples, 1.16%)</title><rect x="52.4881%" y="277" width="1.1588%" height="15" fill="rgb(211,167,15)" fg:x="770" fg:w="17"/><text x="52.7381%" y="287.50"></text></g><g><title>std::sys::unix::fs::File::read (17 samples, 1.16%)</title><rect x="52.4881%" y="261" width="1.1588%" height="15" fill="rgb(210,169,34)" fg:x="770" fg:w="17"/><text x="52.7381%" y="271.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (17 samples, 1.16%)</title><rect x="52.4881%" y="245" width="1.1588%" height="15" fill="rgb(241,121,31)" fg:x="770" fg:w="17"/><text x="52.7381%" y="255.50"></text></g><g><title>__read (17 samples, 1.16%)</title><rect x="52.4881%" y="229" width="1.1588%" height="15" fill="rgb(232,40,11)" fg:x="770" fg:w="17"/><text x="52.7381%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (64 samples, 4.36%)</title><rect x="53.9196%" y="197" width="4.3626%" height="15" fill="rgb(205,86,26)" fg:x="791" fg:w="64"/><text x="54.1696%" y="207.50">&lt;&amp;mut..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (64 samples, 4.36%)</title><rect x="53.9196%" y="181" width="4.3626%" height="15" fill="rgb(231,126,28)" fg:x="791" fg:w="64"/><text x="54.1696%" y="191.50">&lt;serd..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 4.23%)</title><rect x="54.0559%" y="165" width="4.2263%" height="15" fill="rgb(219,221,18)" fg:x="793" fg:w="62"/><text x="54.3059%" y="175.50">&lt;std:..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (61 samples, 4.16%)</title><rect x="54.1241%" y="149" width="4.1581%" height="15" fill="rgb(211,40,0)" fg:x="794" fg:w="61"/><text x="54.3741%" y="159.50">&lt;std:..</text></g><g><title>std::sys::unix::fs::File::read (61 samples, 4.16%)</title><rect x="54.1241%" y="133" width="4.1581%" height="15" fill="rgb(239,85,43)" fg:x="794" fg:w="61"/><text x="54.3741%" y="143.50">std::..</text></g><g><title>std::sys::unix::fd::FileDesc::read (61 samples, 4.16%)</title><rect x="54.1241%" y="117" width="4.1581%" height="15" fill="rgb(231,55,21)" fg:x="794" fg:w="61"/><text x="54.3741%" y="127.50">std::..</text></g><g><title>__read (61 samples, 4.16%)</title><rect x="54.1241%" y="101" width="4.1581%" height="15" fill="rgb(225,184,43)" fg:x="794" fg:w="61"/><text x="54.3741%" y="111.50">__read</text></g><g><title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="58.2140%" y="85" width="0.0682%" height="15" fill="rgb(251,158,41)" fg:x="854" fg:w="1"/><text x="58.4640%" y="95.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (8 samples, 0.55%)</title><rect x="58.2822%" y="181" width="0.5453%" height="15" fill="rgb(234,159,37)" fg:x="855" fg:w="8"/><text x="58.5322%" y="191.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.55%)</title><rect x="58.2822%" y="165" width="0.5453%" height="15" fill="rgb(216,204,22)" fg:x="855" fg:w="8"/><text x="58.5322%" y="175.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (8 samples, 0.55%)</title><rect x="58.2822%" y="149" width="0.5453%" height="15" fill="rgb(214,17,3)" fg:x="855" fg:w="8"/><text x="58.5322%" y="159.50"></text></g><g><title>std::sys::unix::fs::File::read (8 samples, 0.55%)</title><rect x="58.2822%" y="133" width="0.5453%" height="15" fill="rgb(212,111,17)" fg:x="855" fg:w="8"/><text x="58.5322%" y="143.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (8 samples, 0.55%)</title><rect x="58.2822%" y="117" width="0.5453%" height="15" fill="rgb(221,157,24)" fg:x="855" fg:w="8"/><text x="58.5322%" y="127.50"></text></g><g><title>__read (8 samples, 0.55%)</title><rect x="58.2822%" y="101" width="0.5453%" height="15" fill="rgb(252,16,13)" fg:x="855" fg:w="8"/><text x="58.5322%" y="111.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 2.11%)</title><rect x="58.8275%" y="181" width="2.1132%" height="15" fill="rgb(221,62,2)" fg:x="863" fg:w="31"/><text x="59.0775%" y="191.50">&lt;..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (31 samples, 2.11%)</title><rect x="58.8275%" y="165" width="2.1132%" height="15" fill="rgb(247,87,22)" fg:x="863" fg:w="31"/><text x="59.0775%" y="175.50">&lt;..</text></g><g><title>std::sys::unix::fs::File::read (31 samples, 2.11%)</title><rect x="58.8275%" y="149" width="2.1132%" height="15" fill="rgb(215,73,9)" fg:x="863" fg:w="31"/><text x="59.0775%" y="159.50">s..</text></g><g><title>std::sys::unix::fd::FileDesc::read (31 samples, 2.11%)</title><rect x="58.8275%" y="133" width="2.1132%" height="15" fill="rgb(207,175,33)" fg:x="863" fg:w="31"/><text x="59.0775%" y="143.50">s..</text></g><g><title>__read (31 samples, 2.11%)</title><rect x="58.8275%" y="117" width="2.1132%" height="15" fill="rgb(243,129,54)" fg:x="863" fg:w="31"/><text x="59.0775%" y="127.50">_..</text></g><g><title>__pthread_disable_asynccancel (1 samples, 0.07%)</title><rect x="64.4853%" y="53" width="0.0682%" height="15" fill="rgb(227,119,45)" fg:x="946" fg:w="1"/><text x="64.7353%" y="63.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (54 samples, 3.68%)</title><rect x="60.9407%" y="149" width="3.6810%" height="15" fill="rgb(205,109,36)" fg:x="894" fg:w="54"/><text x="61.1907%" y="159.50">&lt;ser..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 3.68%)</title><rect x="60.9407%" y="133" width="3.6810%" height="15" fill="rgb(205,6,39)" fg:x="894" fg:w="54"/><text x="61.1907%" y="143.50">&lt;std..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (54 samples, 3.68%)</title><rect x="60.9407%" y="117" width="3.6810%" height="15" fill="rgb(221,32,16)" fg:x="894" fg:w="54"/><text x="61.1907%" y="127.50">&lt;std..</text></g><g><title>std::sys::unix::fs::File::read (54 samples, 3.68%)</title><rect x="60.9407%" y="101" width="3.6810%" height="15" fill="rgb(228,144,50)" fg:x="894" fg:w="54"/><text x="61.1907%" y="111.50">std:..</text></g><g><title>std::sys::unix::fd::FileDesc::read (54 samples, 3.68%)</title><rect x="60.9407%" y="85" width="3.6810%" height="15" fill="rgb(229,201,53)" fg:x="894" fg:w="54"/><text x="61.1907%" y="95.50">std:..</text></g><g><title>__read (54 samples, 3.68%)</title><rect x="60.9407%" y="69" width="3.6810%" height="15" fill="rgb(249,153,27)" fg:x="894" fg:w="54"/><text x="61.1907%" y="79.50">__re..</text></g><g><title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="64.5535%" y="53" width="0.0682%" height="15" fill="rgb(227,106,25)" fg:x="947" fg:w="1"/><text x="64.8035%" y="63.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (56 samples, 3.82%)</title><rect x="60.9407%" y="165" width="3.8173%" height="15" fill="rgb(230,65,29)" fg:x="894" fg:w="56"/><text x="61.1907%" y="175.50">&lt;&amp;mu..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.14%)</title><rect x="64.6217%" y="149" width="0.1363%" height="15" fill="rgb(221,57,46)" fg:x="948" fg:w="2"/><text x="64.8717%" y="159.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.14%)</title><rect x="64.6217%" y="133" width="0.1363%" height="15" fill="rgb(229,161,17)" fg:x="948" fg:w="2"/><text x="64.8717%" y="143.50"></text></g><g><title>std::sys::unix::fs::File::read (2 samples, 0.14%)</title><rect x="64.6217%" y="117" width="0.1363%" height="15" fill="rgb(222,213,11)" fg:x="948" fg:w="2"/><text x="64.8717%" y="127.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (2 samples, 0.14%)</title><rect x="64.6217%" y="101" width="0.1363%" height="15" fill="rgb(235,35,13)" fg:x="948" fg:w="2"/><text x="64.8717%" y="111.50"></text></g><g><title>__read (2 samples, 0.14%)</title><rect x="64.6217%" y="85" width="0.1363%" height="15" fill="rgb(233,158,34)" fg:x="948" fg:w="2"/><text x="64.8717%" y="95.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (98 samples, 6.68%)</title><rect x="58.2822%" y="197" width="6.6803%" height="15" fill="rgb(215,151,48)" fg:x="855" fg:w="98"/><text x="58.5322%" y="207.50">&lt;&amp;mut ser..</text></g><g><title>dataprep_pipelines::types::pipeline::deserialize_age_identity (59 samples, 4.02%)</title><rect x="60.9407%" y="181" width="4.0218%" height="15" fill="rgb(229,84,14)" fg:x="894" fg:w="59"/><text x="61.1907%" y="191.50">data..</text></g><g><title>&lt;age::x25519::Identity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.20%)</title><rect x="64.7580%" y="165" width="0.2045%" height="15" fill="rgb(229,68,14)" fg:x="950" fg:w="3"/><text x="65.0080%" y="175.50"></text></g><g><title>age::util::parse_bech32 (2 samples, 0.14%)</title><rect x="64.8262%" y="149" width="0.1363%" height="15" fill="rgb(243,106,26)" fg:x="951" fg:w="2"/><text x="65.0762%" y="159.50"></text></g><g><title>bech32::decode (2 samples, 0.14%)</title><rect x="64.8262%" y="133" width="0.1363%" height="15" fill="rgb(206,45,38)" fg:x="951" fg:w="2"/><text x="65.0762%" y="143.50"></text></g><g><title>bech32::split_and_decode (2 samples, 0.14%)</title><rect x="64.8262%" y="117" width="0.1363%" height="15" fill="rgb(226,6,15)" fg:x="951" fg:w="2"/><text x="65.0762%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.14%)</title><rect x="64.8262%" y="101" width="0.1363%" height="15" fill="rgb(232,22,54)" fg:x="951" fg:w="2"/><text x="65.0762%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.14%)</title><rect x="64.8262%" y="85" width="0.1363%" height="15" fill="rgb(229,222,32)" fg:x="951" fg:w="2"/><text x="65.0762%" y="95.50"></text></g><g><title>__read (54 samples, 3.68%)</title><rect x="64.9625%" y="133" width="3.6810%" height="15" fill="rgb(228,62,29)" fg:x="953" fg:w="54"/><text x="65.2125%" y="143.50">__re..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (217 samples, 14.79%)</title><rect x="53.9196%" y="229" width="14.7921%" height="15" fill="rgb(251,103,34)" fg:x="791" fg:w="217"/><text x="54.1696%" y="239.50">&lt;serde::de::impls::&lt;imp..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (217 samples, 14.79%)</title><rect x="53.9196%" y="213" width="14.7921%" height="15" fill="rgb(233,12,30)" fg:x="791" fg:w="217"/><text x="54.1696%" y="223.50">&lt;serde_json::de::SeqAcc..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 3.75%)</title><rect x="64.9625%" y="197" width="3.7491%" height="15" fill="rgb(238,52,0)" fg:x="953" fg:w="55"/><text x="65.2125%" y="207.50">&lt;std..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (55 samples, 3.75%)</title><rect x="64.9625%" y="181" width="3.7491%" height="15" fill="rgb(223,98,5)" fg:x="953" fg:w="55"/><text x="65.2125%" y="191.50">&lt;std..</text></g><g><title>std::sys::unix::fs::File::read (55 samples, 3.75%)</title><rect x="64.9625%" y="165" width="3.7491%" height="15" fill="rgb(228,75,37)" fg:x="953" fg:w="55"/><text x="65.2125%" y="175.50">std:..</text></g><g><title>std::sys::unix::fd::FileDesc::read (55 samples, 3.75%)</title><rect x="64.9625%" y="149" width="3.7491%" height="15" fill="rgb(205,115,49)" fg:x="953" fg:w="55"/><text x="65.2125%" y="159.50">std:..</text></g><g><title>core::cmp::min (1 samples, 0.07%)</title><rect x="68.6435%" y="133" width="0.0682%" height="15" fill="rgb(250,154,43)" fg:x="1007" fg:w="1"/><text x="68.8935%" y="143.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.07%)</title><rect x="68.6435%" y="117" width="0.0682%" height="15" fill="rgb(226,43,29)" fg:x="1007" fg:w="1"/><text x="68.8935%" y="127.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.07%)</title><rect x="68.6435%" y="101" width="0.0682%" height="15" fill="rgb(249,228,39)" fg:x="1007" fg:w="1"/><text x="68.8935%" y="111.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (221 samples, 15.06%)</title><rect x="53.8514%" y="245" width="15.0648%" height="15" fill="rgb(216,79,43)" fg:x="790" fg:w="221"/><text x="54.1014%" y="255.50">&lt;&amp;mut serde_json::de::D..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.20%)</title><rect x="68.7117%" y="229" width="0.2045%" height="15" fill="rgb(228,95,12)" fg:x="1008" fg:w="3"/><text x="68.9617%" y="239.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.20%)</title><rect x="68.7117%" y="213" width="0.2045%" height="15" fill="rgb(249,221,15)" fg:x="1008" fg:w="3"/><text x="68.9617%" y="223.50"></text></g><g><title>std::sys::unix::fs::File::read (3 samples, 0.20%)</title><rect x="68.7117%" y="197" width="0.2045%" height="15" fill="rgb(233,34,13)" fg:x="1008" fg:w="3"/><text x="68.9617%" y="207.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (3 samples, 0.20%)</title><rect x="68.7117%" y="181" width="0.2045%" height="15" fill="rgb(214,103,39)" fg:x="1008" fg:w="3"/><text x="68.9617%" y="191.50"></text></g><g><title>__read (3 samples, 0.20%)</title><rect x="68.7117%" y="165" width="0.2045%" height="15" fill="rgb(251,126,39)" fg:x="1008" fg:w="3"/><text x="68.9617%" y="175.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (2 samples, 0.14%)</title><rect x="68.9162%" y="229" width="0.1363%" height="15" fill="rgb(214,216,36)" fg:x="1011" fg:w="2"/><text x="69.1662%" y="239.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.14%)</title><rect x="68.9162%" y="213" width="0.1363%" height="15" fill="rgb(220,221,8)" fg:x="1011" fg:w="2"/><text x="69.1662%" y="223.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.14%)</title><rect x="68.9162%" y="197" width="0.1363%" height="15" fill="rgb(240,216,3)" fg:x="1011" fg:w="2"/><text x="69.1662%" y="207.50"></text></g><g><title>std::sys::unix::fs::File::read (2 samples, 0.14%)</title><rect x="68.9162%" y="181" width="0.1363%" height="15" fill="rgb(232,218,17)" fg:x="1011" fg:w="2"/><text x="69.1662%" y="191.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (2 samples, 0.14%)</title><rect x="68.9162%" y="165" width="0.1363%" height="15" fill="rgb(229,163,45)" fg:x="1011" fg:w="2"/><text x="69.1662%" y="175.50"></text></g><g><title>__read (2 samples, 0.14%)</title><rect x="68.9162%" y="149" width="0.1363%" height="15" fill="rgb(231,110,42)" fg:x="1011" fg:w="2"/><text x="69.1662%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (3 samples, 0.20%)</title><rect x="68.9162%" y="245" width="0.2045%" height="15" fill="rgb(208,170,48)" fg:x="1011" fg:w="3"/><text x="69.1662%" y="255.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.07%)</title><rect x="69.0525%" y="229" width="0.0682%" height="15" fill="rgb(239,116,25)" fg:x="1013" fg:w="1"/><text x="69.3025%" y="239.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.07%)</title><rect x="69.0525%" y="213" width="0.0682%" height="15" fill="rgb(219,200,50)" fg:x="1013" fg:w="1"/><text x="69.3025%" y="223.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.07%)</title><rect x="69.0525%" y="197" width="0.0682%" height="15" fill="rgb(245,200,0)" fg:x="1013" fg:w="1"/><text x="69.3025%" y="207.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.07%)</title><rect x="69.0525%" y="181" width="0.0682%" height="15" fill="rgb(245,119,33)" fg:x="1013" fg:w="1"/><text x="69.3025%" y="191.50"></text></g><g><title>__read (1 samples, 0.07%)</title><rect x="69.0525%" y="165" width="0.0682%" height="15" fill="rgb(231,125,12)" fg:x="1013" fg:w="1"/><text x="69.3025%" y="175.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.55%)</title><rect x="69.1207%" y="229" width="0.5453%" height="15" fill="rgb(216,96,41)" fg:x="1014" fg:w="8"/><text x="69.3707%" y="239.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (8 samples, 0.55%)</title><rect x="69.1207%" y="213" width="0.5453%" height="15" fill="rgb(248,43,45)" fg:x="1014" fg:w="8"/><text x="69.3707%" y="223.50"></text></g><g><title>std::sys::unix::fs::File::read (8 samples, 0.55%)</title><rect x="69.1207%" y="197" width="0.5453%" height="15" fill="rgb(217,222,7)" fg:x="1014" fg:w="8"/><text x="69.3707%" y="207.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (8 samples, 0.55%)</title><rect x="69.1207%" y="181" width="0.5453%" height="15" fill="rgb(233,28,6)" fg:x="1014" fg:w="8"/><text x="69.3707%" y="191.50"></text></g><g><title>__read (8 samples, 0.55%)</title><rect x="69.1207%" y="165" width="0.5453%" height="15" fill="rgb(231,218,15)" fg:x="1014" fg:w="8"/><text x="69.3707%" y="175.50"></text></g><g><title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="69.5978%" y="149" width="0.0682%" height="15" fill="rgb(226,171,48)" fg:x="1021" fg:w="1"/><text x="69.8478%" y="159.50"></text></g><g><title>__aarch64_cas4_acq (1 samples, 0.07%)</title><rect x="69.5978%" y="133" width="0.0682%" height="15" fill="rgb(235,201,9)" fg:x="1021" fg:w="1"/><text x="69.8478%" y="143.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (21 samples, 1.43%)</title><rect x="69.1207%" y="245" width="1.4315%" height="15" fill="rgb(217,80,15)" fg:x="1014" fg:w="21"/><text x="69.3707%" y="255.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (13 samples, 0.89%)</title><rect x="69.6660%" y="229" width="0.8862%" height="15" fill="rgb(219,152,8)" fg:x="1022" fg:w="13"/><text x="69.9160%" y="239.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.89%)</title><rect x="69.6660%" y="213" width="0.8862%" height="15" fill="rgb(243,107,38)" fg:x="1022" fg:w="13"/><text x="69.9160%" y="223.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (13 samples, 0.89%)</title><rect x="69.6660%" y="197" width="0.8862%" height="15" fill="rgb(231,17,5)" fg:x="1022" fg:w="13"/><text x="69.9160%" y="207.50"></text></g><g><title>std::sys::unix::fs::File::read (13 samples, 0.89%)</title><rect x="69.6660%" y="181" width="0.8862%" height="15" fill="rgb(209,25,54)" fg:x="1022" fg:w="13"/><text x="69.9160%" y="191.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (13 samples, 0.89%)</title><rect x="69.6660%" y="165" width="0.8862%" height="15" fill="rgb(219,0,2)" fg:x="1022" fg:w="13"/><text x="69.9160%" y="175.50"></text></g><g><title>__read (13 samples, 0.89%)</title><rect x="69.6660%" y="149" width="0.8862%" height="15" fill="rgb(246,9,5)" fg:x="1022" fg:w="13"/><text x="69.9160%" y="159.50"></text></g><g><title>__read (77 samples, 5.25%)</title><rect x="70.5521%" y="165" width="5.2488%" height="15" fill="rgb(226,159,4)" fg:x="1035" fg:w="77"/><text x="70.8021%" y="175.50">__read</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (78 samples, 5.32%)</title><rect x="70.5521%" y="245" width="5.3170%" height="15" fill="rgb(219,175,34)" fg:x="1035" fg:w="78"/><text x="70.8021%" y="255.50">&lt;serde_..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 5.32%)</title><rect x="70.5521%" y="229" width="5.3170%" height="15" fill="rgb(236,10,46)" fg:x="1035" fg:w="78"/><text x="70.8021%" y="239.50">&lt;std::i..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (78 samples, 5.32%)</title><rect x="70.5521%" y="213" width="5.3170%" height="15" fill="rgb(240,211,16)" fg:x="1035" fg:w="78"/><text x="70.8021%" y="223.50">&lt;std::f..</text></g><g><title>std::sys::unix::fs::File::read (78 samples, 5.32%)</title><rect x="70.5521%" y="197" width="5.3170%" height="15" fill="rgb(205,3,43)" fg:x="1035" fg:w="78"/><text x="70.8021%" y="207.50">std::sy..</text></g><g><title>std::sys::unix::fd::FileDesc::read (78 samples, 5.32%)</title><rect x="70.5521%" y="181" width="5.3170%" height="15" fill="rgb(245,7,22)" fg:x="1035" fg:w="78"/><text x="70.8021%" y="191.50">std::sy..</text></g><g><title>core::cmp::min (1 samples, 0.07%)</title><rect x="75.8010%" y="165" width="0.0682%" height="15" fill="rgb(239,132,32)" fg:x="1112" fg:w="1"/><text x="76.0510%" y="175.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.07%)</title><rect x="75.8010%" y="149" width="0.0682%" height="15" fill="rgb(228,202,34)" fg:x="1112" fg:w="1"/><text x="76.0510%" y="159.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.07%)</title><rect x="75.8010%" y="133" width="0.0682%" height="15" fill="rgb(254,200,22)" fg:x="1112" fg:w="1"/><text x="76.0510%" y="143.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (425 samples, 28.97%)</title><rect x="53.6469%" y="261" width="28.9707%" height="15" fill="rgb(219,10,39)" fg:x="787" fg:w="425"/><text x="53.8969%" y="271.50">&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde:..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (99 samples, 6.75%)</title><rect x="75.8691%" y="245" width="6.7485%" height="15" fill="rgb(226,210,39)" fg:x="1113" fg:w="99"/><text x="76.1191%" y="255.50">&lt;std::io:..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (99 samples, 6.75%)</title><rect x="75.8691%" y="229" width="6.7485%" height="15" fill="rgb(208,219,16)" fg:x="1113" fg:w="99"/><text x="76.1191%" y="239.50">&lt;std::fs:..</text></g><g><title>std::sys::unix::fs::File::read (99 samples, 6.75%)</title><rect x="75.8691%" y="213" width="6.7485%" height="15" fill="rgb(216,158,51)" fg:x="1113" fg:w="99"/><text x="76.1191%" y="223.50">std::sys:..</text></g><g><title>std::sys::unix::fd::FileDesc::read (99 samples, 6.75%)</title><rect x="75.8691%" y="197" width="6.7485%" height="15" fill="rgb(233,14,44)" fg:x="1113" fg:w="99"/><text x="76.1191%" y="207.50">std::sys:..</text></g><g><title>__read (99 samples, 6.75%)</title><rect x="75.8691%" y="181" width="6.7485%" height="15" fill="rgb(237,97,39)" fg:x="1113" fg:w="99"/><text x="76.1191%" y="191.50">__read</text></g><g><title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="82.5494%" y="165" width="0.0682%" height="15" fill="rgb(218,198,43)" fg:x="1211" fg:w="1"/><text x="82.7994%" y="175.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 2.93%)</title><rect x="82.6176%" y="245" width="2.9312%" height="15" fill="rgb(231,104,20)" fg:x="1212" fg:w="43"/><text x="82.8676%" y="255.50">&lt;s..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (43 samples, 2.93%)</title><rect x="82.6176%" y="229" width="2.9312%" height="15" fill="rgb(254,36,13)" fg:x="1212" fg:w="43"/><text x="82.8676%" y="239.50">&lt;s..</text></g><g><title>std::sys::unix::fs::File::read (43 samples, 2.93%)</title><rect x="82.6176%" y="213" width="2.9312%" height="15" fill="rgb(248,14,50)" fg:x="1212" fg:w="43"/><text x="82.8676%" y="223.50">st..</text></g><g><title>std::sys::unix::fd::FileDesc::read (43 samples, 2.93%)</title><rect x="82.6176%" y="197" width="2.9312%" height="15" fill="rgb(217,107,29)" fg:x="1212" fg:w="43"/><text x="82.8676%" y="207.50">st..</text></g><g><title>__read (43 samples, 2.93%)</title><rect x="82.6176%" y="181" width="2.9312%" height="15" fill="rgb(251,169,33)" fg:x="1212" fg:w="43"/><text x="82.8676%" y="191.50">__..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (44 samples, 3.00%)</title><rect x="82.6176%" y="261" width="2.9993%" height="15" fill="rgb(217,108,32)" fg:x="1212" fg:w="44"/><text x="82.8676%" y="271.50">&lt;se..</text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.07%)</title><rect x="85.5487%" y="245" width="0.0682%" height="15" fill="rgb(219,66,42)" fg:x="1255" fg:w="1"/><text x="85.7987%" y="255.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.07%)</title><rect x="85.5487%" y="229" width="0.0682%" height="15" fill="rgb(206,180,7)" fg:x="1255" fg:w="1"/><text x="85.7987%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (511 samples, 34.83%)</title><rect x="53.6469%" y="277" width="34.8330%" height="15" fill="rgb(208,226,31)" fg:x="787" fg:w="511"/><text x="53.8969%" y="287.50">&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deser..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 2.86%)</title><rect x="85.6169%" y="261" width="2.8630%" height="15" fill="rgb(218,26,49)" fg:x="1256" fg:w="42"/><text x="85.8669%" y="271.50">&lt;s..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (42 samples, 2.86%)</title><rect x="85.6169%" y="245" width="2.8630%" height="15" fill="rgb(233,197,48)" fg:x="1256" fg:w="42"/><text x="85.8669%" y="255.50">&lt;s..</text></g><g><title>std::sys::unix::fs::File::read (42 samples, 2.86%)</title><rect x="85.6169%" y="229" width="2.8630%" height="15" fill="rgb(252,181,51)" fg:x="1256" fg:w="42"/><text x="85.8669%" y="239.50">st..</text></g><g><title>std::sys::unix::fd::FileDesc::read (42 samples, 2.86%)</title><rect x="85.6169%" y="213" width="2.8630%" height="15" fill="rgb(253,90,19)" fg:x="1256" fg:w="42"/><text x="85.8669%" y="223.50">st..</text></g><g><title>__read (42 samples, 2.86%)</title><rect x="85.6169%" y="197" width="2.8630%" height="15" fill="rgb(215,171,30)" fg:x="1256" fg:w="42"/><text x="85.8669%" y="207.50">__..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.14%)</title><rect x="88.4799%" y="277" width="0.1363%" height="15" fill="rgb(214,222,9)" fg:x="1298" fg:w="2"/><text x="88.7299%" y="287.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (2 samples, 0.14%)</title><rect x="88.4799%" y="261" width="0.1363%" height="15" fill="rgb(223,3,22)" fg:x="1298" fg:w="2"/><text x="88.7299%" y="271.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.14%)</title><rect x="88.4799%" y="245" width="0.1363%" height="15" fill="rgb(225,196,46)" fg:x="1298" fg:w="2"/><text x="88.7299%" y="255.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.14%)</title><rect x="88.4799%" y="229" width="0.1363%" height="15" fill="rgb(209,110,37)" fg:x="1298" fg:w="2"/><text x="88.7299%" y="239.50"></text></g><g><title>std::sys::unix::fs::File::read (2 samples, 0.14%)</title><rect x="88.4799%" y="213" width="0.1363%" height="15" fill="rgb(249,89,12)" fg:x="1298" fg:w="2"/><text x="88.7299%" y="223.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (2 samples, 0.14%)</title><rect x="88.4799%" y="197" width="0.1363%" height="15" fill="rgb(226,27,33)" fg:x="1298" fg:w="2"/><text x="88.7299%" y="207.50"></text></g><g><title>__read (2 samples, 0.14%)</title><rect x="88.4799%" y="181" width="0.1363%" height="15" fill="rgb(213,82,22)" fg:x="1298" fg:w="2"/><text x="88.7299%" y="191.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (4 samples, 0.27%)</title><rect x="88.6162%" y="245" width="0.2727%" height="15" fill="rgb(248,140,0)" fg:x="1300" fg:w="4"/><text x="88.8662%" y="255.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.27%)</title><rect x="88.6162%" y="229" width="0.2727%" height="15" fill="rgb(228,106,3)" fg:x="1300" fg:w="4"/><text x="88.8662%" y="239.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (4 samples, 0.27%)</title><rect x="88.6162%" y="213" width="0.2727%" height="15" fill="rgb(209,23,37)" fg:x="1300" fg:w="4"/><text x="88.8662%" y="223.50"></text></g><g><title>std::sys::unix::fs::File::read (4 samples, 0.27%)</title><rect x="88.6162%" y="197" width="0.2727%" height="15" fill="rgb(241,93,50)" fg:x="1300" fg:w="4"/><text x="88.8662%" y="207.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (4 samples, 0.27%)</title><rect x="88.6162%" y="181" width="0.2727%" height="15" fill="rgb(253,46,43)" fg:x="1300" fg:w="4"/><text x="88.8662%" y="191.50"></text></g><g><title>__read (4 samples, 0.27%)</title><rect x="88.6162%" y="165" width="0.2727%" height="15" fill="rgb(226,206,43)" fg:x="1300" fg:w="4"/><text x="88.8662%" y="175.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 0.82%)</title><rect x="88.6162%" y="261" width="0.8180%" height="15" fill="rgb(217,54,7)" fg:x="1300" fg:w="12"/><text x="88.8662%" y="271.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.55%)</title><rect x="88.8889%" y="245" width="0.5453%" height="15" fill="rgb(223,5,52)" fg:x="1304" fg:w="8"/><text x="89.1389%" y="255.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (8 samples, 0.55%)</title><rect x="88.8889%" y="229" width="0.5453%" height="15" fill="rgb(206,52,46)" fg:x="1304" fg:w="8"/><text x="89.1389%" y="239.50"></text></g><g><title>std::sys::unix::fs::File::read (8 samples, 0.55%)</title><rect x="88.8889%" y="213" width="0.5453%" height="15" fill="rgb(253,136,11)" fg:x="1304" fg:w="8"/><text x="89.1389%" y="223.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (8 samples, 0.55%)</title><rect x="88.8889%" y="197" width="0.5453%" height="15" fill="rgb(208,106,33)" fg:x="1304" fg:w="8"/><text x="89.1389%" y="207.50"></text></g><g><title>__read (8 samples, 0.55%)</title><rect x="88.8889%" y="181" width="0.5453%" height="15" fill="rgb(206,54,4)" fg:x="1304" fg:w="8"/><text x="89.1389%" y="191.50"></text></g><g><title>__pthread_disable_asynccancel (1 samples, 0.07%)</title><rect x="89.3661%" y="165" width="0.0682%" height="15" fill="rgb(213,3,15)" fg:x="1311" fg:w="1"/><text x="89.6161%" y="175.50"></text></g><g><title>&lt;serde_json::de::VariantAccess&lt;R&gt; as serde::de::EnumAccess&gt;::variant_seed (13 samples, 0.89%)</title><rect x="88.6162%" y="277" width="0.8862%" height="15" fill="rgb(252,211,39)" fg:x="1300" fg:w="13"/><text x="88.8662%" y="287.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.07%)</title><rect x="89.4342%" y="261" width="0.0682%" height="15" fill="rgb(223,6,36)" fg:x="1312" fg:w="1"/><text x="89.6842%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.07%)</title><rect x="89.4342%" y="245" width="0.0682%" height="15" fill="rgb(252,169,45)" fg:x="1312" fg:w="1"/><text x="89.6842%" y="255.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.07%)</title><rect x="89.4342%" y="229" width="0.0682%" height="15" fill="rgb(212,48,26)" fg:x="1312" fg:w="1"/><text x="89.6842%" y="239.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.07%)</title><rect x="89.4342%" y="213" width="0.0682%" height="15" fill="rgb(251,102,48)" fg:x="1312" fg:w="1"/><text x="89.6842%" y="223.50"></text></g><g><title>__read (1 samples, 0.07%)</title><rect x="89.4342%" y="197" width="0.0682%" height="15" fill="rgb(243,208,16)" fg:x="1312" fg:w="1"/><text x="89.6842%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1,071 samples, 73.01%)</title><rect x="17.0416%" y="309" width="73.0061%" height="15" fill="rgb(219,96,24)" fg:x="250" fg:w="1071"/><text x="17.2916%" y="319.50">&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct</text></g><g><title>dataprep_pipelines::types::shared::_::&lt;impl serde::de::Deserialize for dataprep_pipelines::types::shared::DataProcessDirectiveToDisk&lt;T&gt;&gt;::deserialize (534 samples, 36.40%)</title><rect x="53.6469%" y="293" width="36.4008%" height="15" fill="rgb(219,33,29)" fg:x="787" fg:w="534"/><text x="53.8969%" y="303.50">dataprep_pipelines::types::shared::_::&lt;impl serde::de::Dese..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.55%)</title><rect x="89.5024%" y="277" width="0.5453%" height="15" fill="rgb(223,176,5)" fg:x="1313" fg:w="8"/><text x="89.7524%" y="287.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (8 samples, 0.55%)</title><rect x="89.5024%" y="261" width="0.5453%" height="15" fill="rgb(228,140,14)" fg:x="1313" fg:w="8"/><text x="89.7524%" y="271.50"></text></g><g><title>std::sys::unix::fs::File::read (8 samples, 0.55%)</title><rect x="89.5024%" y="245" width="0.5453%" height="15" fill="rgb(217,179,31)" fg:x="1313" fg:w="8"/><text x="89.7524%" y="255.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (8 samples, 0.55%)</title><rect x="89.5024%" y="229" width="0.5453%" height="15" fill="rgb(230,9,30)" fg:x="1313" fg:w="8"/><text x="89.7524%" y="239.50"></text></g><g><title>__read (8 samples, 0.55%)</title><rect x="89.5024%" y="213" width="0.5453%" height="15" fill="rgb(230,136,20)" fg:x="1313" fg:w="8"/><text x="89.7524%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,324 samples, 90.25%)</title><rect x="0.0000%" y="485" width="90.2522%" height="15" fill="rgb(215,210,22)" fg:x="0" fg:w="1324"/><text x="0.2500%" y="495.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,324 samples, 90.25%)</title><rect x="0.0000%" y="469" width="90.2522%" height="15" fill="rgb(218,43,5)" fg:x="0" fg:w="1324"/><text x="0.2500%" y="479.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_batched (1,324 samples, 90.25%)</title><rect x="0.0000%" y="453" width="90.2522%" height="15" fill="rgb(216,11,5)" fg:x="0" fg:w="1324"/><text x="0.2500%" y="463.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_batched</text></g><g><title>&lt;&amp;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (1,324 samples, 90.25%)</title><rect x="0.0000%" y="437" width="90.2522%" height="15" fill="rgb(209,82,29)" fg:x="0" fg:w="1324"/><text x="0.2500%" y="447.50">&lt;&amp;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (1,324 samples, 90.25%)</title><rect x="0.0000%" y="421" width="90.2522%" height="15" fill="rgb(244,115,12)" fg:x="0" fg:w="1324"/><text x="0.2500%" y="431.50">tokio::runtime::scheduler::multi_thread::MultiThread::block_on</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1,324 samples, 90.25%)</title><rect x="0.0000%" y="405" width="90.2522%" height="15" fill="rgb(222,82,18)" fg:x="0" fg:w="1324"/><text x="0.2500%" y="415.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>pipeline::unpack_benchmark::{{closure}}::{{closure}}::{{closure}} (1,300 samples, 88.62%)</title><rect x="1.6360%" y="389" width="88.6162%" height="15" fill="rgb(249,227,8)" fg:x="24" fg:w="1300"/><text x="1.8860%" y="399.50">pipeline::unpack_benchmark::{{closure}}::{{closure}}::{{closure}}</text></g><g><title>serde_json::de::from_reader (1,074 samples, 73.21%)</title><rect x="17.0416%" y="373" width="73.2106%" height="15" fill="rgb(253,141,45)" fg:x="250" fg:w="1074"/><text x="17.2916%" y="383.50">serde_json::de::from_reader</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,074 samples, 73.21%)</title><rect x="17.0416%" y="357" width="73.2106%" height="15" fill="rgb(234,184,4)" fg:x="250" fg:w="1074"/><text x="17.2916%" y="367.50">&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,074 samples, 73.21%)</title><rect x="17.0416%" y="341" width="73.2106%" height="15" fill="rgb(218,194,23)" fg:x="250" fg:w="1074"/><text x="17.2916%" y="351.50">&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,074 samples, 73.21%)</title><rect x="17.0416%" y="325" width="73.2106%" height="15" fill="rgb(235,66,41)" fg:x="250" fg:w="1074"/><text x="17.2916%" y="335.50">&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.20%)</title><rect x="90.0477%" y="309" width="0.2045%" height="15" fill="rgb(245,217,1)" fg:x="1321" fg:w="3"/><text x="90.2977%" y="319.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.20%)</title><rect x="90.0477%" y="293" width="0.2045%" height="15" fill="rgb(229,91,1)" fg:x="1321" fg:w="3"/><text x="90.2977%" y="303.50"></text></g><g><title>std::sys::unix::fs::File::read (3 samples, 0.20%)</title><rect x="90.0477%" y="277" width="0.2045%" height="15" fill="rgb(207,101,30)" fg:x="1321" fg:w="3"/><text x="90.2977%" y="287.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (3 samples, 0.20%)</title><rect x="90.0477%" y="261" width="0.2045%" height="15" fill="rgb(223,82,49)" fg:x="1321" fg:w="3"/><text x="90.2977%" y="271.50"></text></g><g><title>__read (3 samples, 0.20%)</title><rect x="90.0477%" y="245" width="0.2045%" height="15" fill="rgb(218,167,17)" fg:x="1321" fg:w="3"/><text x="90.2977%" y="255.50"></text></g><g><title>pipeline::prep_unpack (1 samples, 0.07%)</title><rect x="90.2522%" y="405" width="0.0682%" height="15" fill="rgb(208,103,14)" fg:x="1324" fg:w="1"/><text x="90.5022%" y="415.50"></text></g><g><title>dataprep_pipelines::utils::fs::ensure_path_exists_and_is_empty_dir (1 samples, 0.07%)</title><rect x="90.2522%" y="389" width="0.0682%" height="15" fill="rgb(238,20,8)" fg:x="1324" fg:w="1"/><text x="90.5022%" y="399.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all (1 samples, 0.07%)</title><rect x="90.2522%" y="373" width="0.0682%" height="15" fill="rgb(218,80,54)" fg:x="1324" fg:w="1"/><text x="90.5022%" y="383.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern (1 samples, 0.07%)</title><rect x="90.2522%" y="357" width="0.0682%" height="15" fill="rgb(240,144,17)" fg:x="1324" fg:w="1"/><text x="90.5022%" y="367.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.07%)</title><rect x="90.2522%" y="341" width="0.0682%" height="15" fill="rgb(245,27,50)" fg:x="1324" fg:w="1"/><text x="90.5022%" y="351.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.07%)</title><rect x="90.2522%" y="325" width="0.0682%" height="15" fill="rgb(251,51,7)" fg:x="1324" fg:w="1"/><text x="90.5022%" y="335.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern::{{closure}} (1 samples, 0.07%)</title><rect x="90.2522%" y="309" width="0.0682%" height="15" fill="rgb(245,217,29)" fg:x="1324" fg:w="1"/><text x="90.5022%" y="319.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (1 samples, 0.07%)</title><rect x="90.2522%" y="293" width="0.0682%" height="15" fill="rgb(221,176,29)" fg:x="1324" fg:w="1"/><text x="90.5022%" y="303.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (1 samples, 0.07%)</title><rect x="90.2522%" y="277" width="0.0682%" height="15" fill="rgb(212,180,24)" fg:x="1324" fg:w="1"/><text x="90.5022%" y="287.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (1 samples, 0.07%)</title><rect x="90.2522%" y="261" width="0.0682%" height="15" fill="rgb(254,24,2)" fg:x="1324" fg:w="1"/><text x="90.5022%" y="271.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (1 samples, 0.07%)</title><rect x="90.2522%" y="245" width="0.0682%" height="15" fill="rgb(230,100,2)" fg:x="1324" fg:w="1"/><text x="90.5022%" y="255.50"></text></g><g><title>unlinkat (1 samples, 0.07%)</title><rect x="90.2522%" y="229" width="0.0682%" height="15" fill="rgb(219,142,25)" fg:x="1324" fg:w="1"/><text x="90.5022%" y="239.50"></text></g><g><title>age::protocol::Decryptor&lt;R&gt;::new (3 samples, 0.20%)</title><rect x="90.3204%" y="357" width="0.2045%" height="15" fill="rgb(240,73,43)" fg:x="1325" fg:w="3"/><text x="90.5704%" y="367.50"></text></g><g><title>age::format::Header::read (3 samples, 0.20%)</title><rect x="90.3204%" y="341" width="0.2045%" height="15" fill="rgb(214,114,15)" fg:x="1325" fg:w="3"/><text x="90.5704%" y="351.50"></text></g><g><title>age::format::read::header (3 samples, 0.20%)</title><rect x="90.3204%" y="325" width="0.2045%" height="15" fill="rgb(207,130,4)" fg:x="1325" fg:w="3"/><text x="90.5704%" y="335.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (3 samples, 0.20%)</title><rect x="90.3204%" y="309" width="0.2045%" height="15" fill="rgb(221,25,40)" fg:x="1325" fg:w="3"/><text x="90.5704%" y="319.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3 samples, 0.20%)</title><rect x="90.3204%" y="293" width="0.2045%" height="15" fill="rgb(241,184,7)" fg:x="1325" fg:w="3"/><text x="90.5704%" y="303.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3 samples, 0.20%)</title><rect x="90.3204%" y="277" width="0.2045%" height="15" fill="rgb(235,159,4)" fg:x="1325" fg:w="3"/><text x="90.5704%" y="287.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3 samples, 0.20%)</title><rect x="90.3204%" y="261" width="0.2045%" height="15" fill="rgb(214,87,48)" fg:x="1325" fg:w="3"/><text x="90.5704%" y="271.50"></text></g><g><title>age_core::format::read::legacy_age_stanza (3 samples, 0.20%)</title><rect x="90.3204%" y="245" width="0.2045%" height="15" fill="rgb(246,198,24)" fg:x="1325" fg:w="3"/><text x="90.5704%" y="255.50"></text></g><g><title>age_core::format::read::age_stanza (3 samples, 0.20%)</title><rect x="90.3204%" y="229" width="0.2045%" height="15" fill="rgb(209,66,40)" fg:x="1325" fg:w="3"/><text x="90.5704%" y="239.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3 samples, 0.20%)</title><rect x="90.3204%" y="213" width="0.2045%" height="15" fill="rgb(233,147,39)" fg:x="1325" fg:w="3"/><text x="90.5704%" y="223.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3 samples, 0.20%)</title><rect x="90.3204%" y="197" width="0.2045%" height="15" fill="rgb(231,145,52)" fg:x="1325" fg:w="3"/><text x="90.5704%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.14%)</title><rect x="90.3885%" y="181" width="0.1363%" height="15" fill="rgb(206,20,26)" fg:x="1326" fg:w="2"/><text x="90.6385%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.14%)</title><rect x="90.3885%" y="165" width="0.1363%" height="15" fill="rgb(238,220,4)" fg:x="1326" fg:w="2"/><text x="90.6385%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.14%)</title><rect x="90.3885%" y="149" width="0.1363%" height="15" fill="rgb(252,195,42)" fg:x="1326" fg:w="2"/><text x="90.6385%" y="159.50"></text></g><g><title>curve25519_dalek::backend::serial::curve_models::&lt;impl core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::curve_models::AffineNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::add (1 samples, 0.07%)</title><rect x="90.5249%" y="277" width="0.0682%" height="15" fill="rgb(209,10,6)" fg:x="1328" fg:w="1"/><text x="90.7749%" y="287.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.07%)</title><rect x="90.5249%" y="261" width="0.0682%" height="15" fill="rgb(229,3,52)" fg:x="1328" fg:w="1"/><text x="90.7749%" y="271.50"></text></g><g><title>&lt;x25519_dalek::x25519::PublicKey as core::convert::From&lt;&amp;x25519_dalek::x25519::EphemeralSecret&gt;&gt;::from (2 samples, 0.14%)</title><rect x="90.5249%" y="309" width="0.1363%" height="15" fill="rgb(253,49,37)" fg:x="1328" fg:w="2"/><text x="90.7749%" y="319.50"></text></g><g><title>curve25519_dalek::edwards::EdwardsBasepointTable::basepoint_mul (2 samples, 0.14%)</title><rect x="90.5249%" y="293" width="0.1363%" height="15" fill="rgb(240,103,49)" fg:x="1328" fg:w="2"/><text x="90.7749%" y="303.50"></text></g><g><title>curve25519_dalek::window::LookupTable&lt;T&gt;::select (1 samples, 0.07%)</title><rect x="90.5930%" y="277" width="0.0682%" height="15" fill="rgb(250,182,30)" fg:x="1329" fg:w="1"/><text x="90.8430%" y="287.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (8 samples, 0.55%)</title><rect x="90.7294%" y="277" width="0.5453%" height="15" fill="rgb(248,8,30)" fg:x="1331" fg:w="8"/><text x="90.9794%" y="287.50"></text></g><g><title>age::Identity::unwrap_stanzas (14 samples, 0.95%)</title><rect x="90.5249%" y="341" width="0.9543%" height="15" fill="rgb(237,120,30)" fg:x="1328" fg:w="14"/><text x="90.7749%" y="351.50"></text></g><g><title>&lt;age::x25519::Identity as age::Identity&gt;::unwrap_stanza (14 samples, 0.95%)</title><rect x="90.5249%" y="325" width="0.9543%" height="15" fill="rgb(221,146,34)" fg:x="1328" fg:w="14"/><text x="90.7749%" y="335.50"></text></g><g><title>x25519_dalek::x25519::StaticSecret::diffie_hellman (12 samples, 0.82%)</title><rect x="90.6612%" y="309" width="0.8180%" height="15" fill="rgb(242,55,13)" fg:x="1330" fg:w="12"/><text x="90.9112%" y="319.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (12 samples, 0.82%)</title><rect x="90.6612%" y="293" width="0.8180%" height="15" fill="rgb(242,112,31)" fg:x="1330" fg:w="12"/><text x="90.9112%" y="303.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (3 samples, 0.20%)</title><rect x="91.2747%" y="277" width="0.2045%" height="15" fill="rgb(249,192,27)" fg:x="1339" fg:w="3"/><text x="91.5247%" y="287.50"></text></g><g><title>age::keys::v1_payload_key (1 samples, 0.07%)</title><rect x="91.4792%" y="341" width="0.0682%" height="15" fill="rgb(208,204,44)" fg:x="1342" fg:w="1"/><text x="91.7292%" y="351.50"></text></g><g><title>age_core::primitives::hkdf (1 samples, 0.07%)</title><rect x="91.4792%" y="325" width="0.0682%" height="15" fill="rgb(208,93,54)" fg:x="1342" fg:w="1"/><text x="91.7292%" y="335.50"></text></g><g><title>hkdf::Hkdf&lt;H,I&gt;::new (1 samples, 0.07%)</title><rect x="91.4792%" y="309" width="0.0682%" height="15" fill="rgb(242,1,31)" fg:x="1342" fg:w="1"/><text x="91.7292%" y="319.50"></text></g><g><title>sha2::sha256::soft::compress (1 samples, 0.07%)</title><rect x="91.4792%" y="293" width="0.0682%" height="15" fill="rgb(241,83,25)" fg:x="1342" fg:w="1"/><text x="91.7292%" y="303.50"></text></g><g><title>age::protocol::decryptor::RecipientsDecryptor&lt;R&gt;::decrypt (18 samples, 1.23%)</title><rect x="90.5249%" y="357" width="1.2270%" height="15" fill="rgb(205,169,50)" fg:x="1328" fg:w="18"/><text x="90.7749%" y="367.50"></text></g><g><title>age::primitives::stream::Stream::decrypt (3 samples, 0.20%)</title><rect x="91.5474%" y="341" width="0.2045%" height="15" fill="rgb(239,186,37)" fg:x="1343" fg:w="3"/><text x="91.7974%" y="351.50"></text></g><g><title>__libc_calloc (2 samples, 0.14%)</title><rect x="91.6155%" y="325" width="0.1363%" height="15" fill="rgb(205,221,10)" fg:x="1344" fg:w="2"/><text x="91.8655%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::gz::write::GzDecoder&lt;std::fs::File&gt;&gt; (1 samples, 0.07%)</title><rect x="91.7519%" y="357" width="0.0682%" height="15" fill="rgb(218,196,15)" fg:x="1346" fg:w="1"/><text x="92.0019%" y="367.50"></text></g><g><title>&lt;flate2::zio::Writer&lt;W,D&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="91.7519%" y="341" width="0.0682%" height="15" fill="rgb(218,196,35)" fg:x="1346" fg:w="1"/><text x="92.0019%" y="351.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::dump (1 samples, 0.07%)</title><rect x="91.7519%" y="325" width="0.0682%" height="15" fill="rgb(233,63,24)" fg:x="1346" fg:w="1"/><text x="92.0019%" y="335.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.07%)</title><rect x="91.7519%" y="309" width="0.0682%" height="15" fill="rgb(225,8,4)" fg:x="1346" fg:w="1"/><text x="92.0019%" y="319.50"></text></g><g><title>std::sys::unix::net::Socket::write (1 samples, 0.07%)</title><rect x="91.7519%" y="293" width="0.0682%" height="15" fill="rgb(234,105,35)" fg:x="1346" fg:w="1"/><text x="92.0019%" y="303.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.07%)</title><rect x="91.7519%" y="277" width="0.0682%" height="15" fill="rgb(236,21,32)" fg:x="1346" fg:w="1"/><text x="92.0019%" y="287.50"></text></g><g><title>__write (1 samples, 0.07%)</title><rect x="91.7519%" y="261" width="0.0682%" height="15" fill="rgb(228,109,6)" fg:x="1346" fg:w="1"/><text x="92.0019%" y="271.50"></text></g><g><title>&lt;tokio_stream::stream_ext::collect::Collect&lt;T,U&gt; as core::future::future::Future&gt;::poll (23 samples, 1.57%)</title><rect x="90.3204%" y="389" width="1.5678%" height="15" fill="rgb(229,215,31)" fg:x="1325" fg:w="23"/><text x="90.5704%" y="399.50"></text></g><g><title>&lt;tokio_stream::stream_ext::then::Then&lt;St,Fut,F&gt; as futures_core::stream::Stream&gt;::poll_next (23 samples, 1.57%)</title><rect x="90.3204%" y="373" width="1.5678%" height="15" fill="rgb(221,52,54)" fg:x="1325" fg:w="23"/><text x="90.5704%" y="383.50"></text></g><g><title>std::io::copy::stack_buffer_copy (1 samples, 0.07%)</title><rect x="91.8200%" y="357" width="0.0682%" height="15" fill="rgb(252,129,43)" fg:x="1347" fg:w="1"/><text x="92.0700%" y="367.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.07%)</title><rect x="91.8200%" y="341" width="0.0682%" height="15" fill="rgb(248,183,27)" fg:x="1347" fg:w="1"/><text x="92.0700%" y="351.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::write_with_status (1 samples, 0.07%)</title><rect x="91.8200%" y="325" width="0.0682%" height="15" fill="rgb(250,0,22)" fg:x="1347" fg:w="1"/><text x="92.0700%" y="335.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run_vec (1 samples, 0.07%)</title><rect x="91.8200%" y="309" width="0.0682%" height="15" fill="rgb(213,166,10)" fg:x="1347" fg:w="1"/><text x="92.0700%" y="319.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (1 samples, 0.07%)</title><rect x="91.8200%" y="293" width="0.0682%" height="15" fill="rgb(207,163,36)" fg:x="1347" fg:w="1"/><text x="92.0700%" y="303.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (1 samples, 0.07%)</title><rect x="91.8200%" y="277" width="0.0682%" height="15" fill="rgb(208,122,22)" fg:x="1347" fg:w="1"/><text x="92.0700%" y="287.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (1 samples, 0.07%)</title><rect x="91.8200%" y="261" width="0.0682%" height="15" fill="rgb(207,104,49)" fg:x="1347" fg:w="1"/><text x="92.0700%" y="271.50"></text></g><g><title>miniz_oxide::inflate::core::init_tree (1 samples, 0.07%)</title><rect x="91.8200%" y="245" width="0.0682%" height="15" fill="rgb(248,211,50)" fg:x="1347" fg:w="1"/><text x="92.0700%" y="255.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (20 samples, 1.36%)</title><rect x="91.8882%" y="277" width="1.3633%" height="15" fill="rgb(217,13,45)" fg:x="1348" fg:w="20"/><text x="92.1382%" y="287.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 1.36%)</title><rect x="91.8882%" y="261" width="1.3633%" height="15" fill="rgb(211,216,49)" fg:x="1348" fg:w="20"/><text x="92.1382%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (20 samples, 1.36%)</title><rect x="91.8882%" y="245" width="1.3633%" height="15" fill="rgb(221,58,53)" fg:x="1348" fg:w="20"/><text x="92.1382%" y="255.50"></text></g><g><title>std::sys::unix::fs::File::read (20 samples, 1.36%)</title><rect x="91.8882%" y="229" width="1.3633%" height="15" fill="rgb(220,112,41)" fg:x="1348" fg:w="20"/><text x="92.1382%" y="239.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (20 samples, 1.36%)</title><rect x="91.8882%" y="213" width="1.3633%" height="15" fill="rgb(236,38,28)" fg:x="1348" fg:w="20"/><text x="92.1382%" y="223.50"></text></g><g><title>__read (20 samples, 1.36%)</title><rect x="91.8882%" y="197" width="1.3633%" height="15" fill="rgb(227,195,22)" fg:x="1348" fg:w="20"/><text x="92.1382%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (21 samples, 1.43%)</title><rect x="91.8882%" y="293" width="1.4315%" height="15" fill="rgb(214,55,33)" fg:x="1348" fg:w="21"/><text x="92.1382%" y="303.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.07%)</title><rect x="93.2515%" y="277" width="0.0682%" height="15" fill="rgb(248,80,13)" fg:x="1368" fg:w="1"/><text x="93.5015%" y="287.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.07%)</title><rect x="93.2515%" y="261" width="0.0682%" height="15" fill="rgb(238,52,6)" fg:x="1368" fg:w="1"/><text x="93.5015%" y="271.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.07%)</title><rect x="93.2515%" y="245" width="0.0682%" height="15" fill="rgb(224,198,47)" fg:x="1368" fg:w="1"/><text x="93.5015%" y="255.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.07%)</title><rect x="93.2515%" y="229" width="0.0682%" height="15" fill="rgb(233,171,20)" fg:x="1368" fg:w="1"/><text x="93.5015%" y="239.50"></text></g><g><title>__read (1 samples, 0.07%)</title><rect x="93.2515%" y="213" width="0.0682%" height="15" fill="rgb(241,30,25)" fg:x="1368" fg:w="1"/><text x="93.5015%" y="223.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (7 samples, 0.48%)</title><rect x="93.3197%" y="277" width="0.4772%" height="15" fill="rgb(207,171,38)" fg:x="1369" fg:w="7"/><text x="93.5697%" y="287.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.48%)</title><rect x="93.3197%" y="261" width="0.4772%" height="15" fill="rgb(234,70,1)" fg:x="1369" fg:w="7"/><text x="93.5697%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (7 samples, 0.48%)</title><rect x="93.3197%" y="245" width="0.4772%" height="15" fill="rgb(232,178,18)" fg:x="1369" fg:w="7"/><text x="93.5697%" y="255.50"></text></g><g><title>std::sys::unix::fs::File::read (7 samples, 0.48%)</title><rect x="93.3197%" y="229" width="0.4772%" height="15" fill="rgb(241,78,40)" fg:x="1369" fg:w="7"/><text x="93.5697%" y="239.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (7 samples, 0.48%)</title><rect x="93.3197%" y="213" width="0.4772%" height="15" fill="rgb(222,35,25)" fg:x="1369" fg:w="7"/><text x="93.5697%" y="223.50"></text></g><g><title>__read (7 samples, 0.48%)</title><rect x="93.3197%" y="197" width="0.4772%" height="15" fill="rgb(207,92,16)" fg:x="1369" fg:w="7"/><text x="93.5697%" y="207.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.20%)</title><rect x="93.7969%" y="277" width="0.2045%" height="15" fill="rgb(216,59,51)" fg:x="1376" fg:w="3"/><text x="94.0469%" y="287.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.20%)</title><rect x="93.7969%" y="261" width="0.2045%" height="15" fill="rgb(213,80,28)" fg:x="1376" fg:w="3"/><text x="94.0469%" y="271.50"></text></g><g><title>std::sys::unix::fs::File::read (3 samples, 0.20%)</title><rect x="93.7969%" y="245" width="0.2045%" height="15" fill="rgb(220,93,7)" fg:x="1376" fg:w="3"/><text x="94.0469%" y="255.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (3 samples, 0.20%)</title><rect x="93.7969%" y="229" width="0.2045%" height="15" fill="rgb(225,24,44)" fg:x="1376" fg:w="3"/><text x="94.0469%" y="239.50"></text></g><g><title>__read (3 samples, 0.20%)</title><rect x="93.7969%" y="213" width="0.2045%" height="15" fill="rgb(243,74,40)" fg:x="1376" fg:w="3"/><text x="94.0469%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (11 samples, 0.75%)</title><rect x="93.3197%" y="293" width="0.7498%" height="15" fill="rgb(228,39,7)" fg:x="1369" fg:w="11"/><text x="93.5697%" y="303.50"></text></g><g><title>dataprep_pipelines::types::spider::_::&lt;impl serde::de::Deserialize for dataprep_pipelines::types::spider::FileType&gt;::deserialize (1 samples, 0.07%)</title><rect x="94.0014%" y="277" width="0.0682%" height="15" fill="rgb(227,79,8)" fg:x="1379" fg:w="1"/><text x="94.2514%" y="287.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.07%)</title><rect x="94.0014%" y="261" width="0.0682%" height="15" fill="rgb(236,58,11)" fg:x="1379" fg:w="1"/><text x="94.2514%" y="271.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1 samples, 0.07%)</title><rect x="94.0014%" y="245" width="0.0682%" height="15" fill="rgb(249,63,35)" fg:x="1379" fg:w="1"/><text x="94.2514%" y="255.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.07%)</title><rect x="94.0014%" y="229" width="0.0682%" height="15" fill="rgb(252,114,16)" fg:x="1379" fg:w="1"/><text x="94.2514%" y="239.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.07%)</title><rect x="94.0014%" y="213" width="0.0682%" height="15" fill="rgb(254,151,24)" fg:x="1379" fg:w="1"/><text x="94.2514%" y="223.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.07%)</title><rect x="94.0014%" y="197" width="0.0682%" height="15" fill="rgb(253,54,39)" fg:x="1379" fg:w="1"/><text x="94.2514%" y="207.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.07%)</title><rect x="94.0014%" y="181" width="0.0682%" height="15" fill="rgb(243,25,45)" fg:x="1379" fg:w="1"/><text x="94.2514%" y="191.50"></text></g><g><title>__read (1 samples, 0.07%)</title><rect x="94.0014%" y="165" width="0.0682%" height="15" fill="rgb(234,134,9)" fg:x="1379" fg:w="1"/><text x="94.2514%" y="175.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (10 samples, 0.68%)</title><rect x="94.0695%" y="293" width="0.6817%" height="15" fill="rgb(227,166,31)" fg:x="1380" fg:w="10"/><text x="94.3195%" y="303.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.68%)</title><rect x="94.0695%" y="277" width="0.6817%" height="15" fill="rgb(245,143,41)" fg:x="1380" fg:w="10"/><text x="94.3195%" y="287.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (10 samples, 0.68%)</title><rect x="94.0695%" y="261" width="0.6817%" height="15" fill="rgb(238,181,32)" fg:x="1380" fg:w="10"/><text x="94.3195%" y="271.50"></text></g><g><title>std::sys::unix::fs::File::read (10 samples, 0.68%)</title><rect x="94.0695%" y="245" width="0.6817%" height="15" fill="rgb(224,113,18)" fg:x="1380" fg:w="10"/><text x="94.3195%" y="255.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (10 samples, 0.68%)</title><rect x="94.0695%" y="229" width="0.6817%" height="15" fill="rgb(240,229,28)" fg:x="1380" fg:w="10"/><text x="94.3195%" y="239.50"></text></g><g><title>__read (10 samples, 0.68%)</title><rect x="94.0695%" y="213" width="0.6817%" height="15" fill="rgb(250,185,3)" fg:x="1380" fg:w="10"/><text x="94.3195%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (46 samples, 3.14%)</title><rect x="91.8882%" y="309" width="3.1357%" height="15" fill="rgb(212,59,25)" fg:x="1348" fg:w="46"/><text x="92.1382%" y="319.50">&lt;&amp;m..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.27%)</title><rect x="94.7512%" y="293" width="0.2727%" height="15" fill="rgb(221,87,20)" fg:x="1390" fg:w="4"/><text x="95.0012%" y="303.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (4 samples, 0.27%)</title><rect x="94.7512%" y="277" width="0.2727%" height="15" fill="rgb(213,74,28)" fg:x="1390" fg:w="4"/><text x="95.0012%" y="287.50"></text></g><g><title>std::sys::unix::fs::File::read (4 samples, 0.27%)</title><rect x="94.7512%" y="261" width="0.2727%" height="15" fill="rgb(224,132,34)" fg:x="1390" fg:w="4"/><text x="95.0012%" y="271.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (4 samples, 0.27%)</title><rect x="94.7512%" y="245" width="0.2727%" height="15" fill="rgb(222,101,24)" fg:x="1390" fg:w="4"/><text x="95.0012%" y="255.50"></text></g><g><title>__read (4 samples, 0.27%)</title><rect x="94.7512%" y="229" width="0.2727%" height="15" fill="rgb(254,142,4)" fg:x="1390" fg:w="4"/><text x="95.0012%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (12 samples, 0.82%)</title><rect x="95.0239%" y="213" width="0.8180%" height="15" fill="rgb(230,229,49)" fg:x="1394" fg:w="12"/><text x="95.2739%" y="223.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (12 samples, 0.82%)</title><rect x="95.0239%" y="197" width="0.8180%" height="15" fill="rgb(238,70,47)" fg:x="1394" fg:w="12"/><text x="95.2739%" y="207.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.82%)</title><rect x="95.0239%" y="181" width="0.8180%" height="15" fill="rgb(231,160,17)" fg:x="1394" fg:w="12"/><text x="95.2739%" y="191.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (12 samples, 0.82%)</title><rect x="95.0239%" y="165" width="0.8180%" height="15" fill="rgb(218,68,53)" fg:x="1394" fg:w="12"/><text x="95.2739%" y="175.50"></text></g><g><title>std::sys::unix::fs::File::read (12 samples, 0.82%)</title><rect x="95.0239%" y="149" width="0.8180%" height="15" fill="rgb(236,111,10)" fg:x="1394" fg:w="12"/><text x="95.2739%" y="159.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (12 samples, 0.82%)</title><rect x="95.0239%" y="133" width="0.8180%" height="15" fill="rgb(224,34,41)" fg:x="1394" fg:w="12"/><text x="95.2739%" y="143.50"></text></g><g><title>__read (12 samples, 0.82%)</title><rect x="95.0239%" y="117" width="0.8180%" height="15" fill="rgb(241,118,19)" fg:x="1394" fg:w="12"/><text x="95.2739%" y="127.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (2 samples, 0.14%)</title><rect x="95.8419%" y="197" width="0.1363%" height="15" fill="rgb(238,129,25)" fg:x="1406" fg:w="2"/><text x="96.0919%" y="207.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.14%)</title><rect x="95.8419%" y="181" width="0.1363%" height="15" fill="rgb(238,22,31)" fg:x="1406" fg:w="2"/><text x="96.0919%" y="191.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.14%)</title><rect x="95.8419%" y="165" width="0.1363%" height="15" fill="rgb(222,174,48)" fg:x="1406" fg:w="2"/><text x="96.0919%" y="175.50"></text></g><g><title>std::sys::unix::fs::File::read (2 samples, 0.14%)</title><rect x="95.8419%" y="149" width="0.1363%" height="15" fill="rgb(206,152,40)" fg:x="1406" fg:w="2"/><text x="96.0919%" y="159.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (2 samples, 0.14%)</title><rect x="95.8419%" y="133" width="0.1363%" height="15" fill="rgb(218,99,54)" fg:x="1406" fg:w="2"/><text x="96.0919%" y="143.50"></text></g><g><title>__read (2 samples, 0.14%)</title><rect x="95.8419%" y="117" width="0.1363%" height="15" fill="rgb(220,174,26)" fg:x="1406" fg:w="2"/><text x="96.0919%" y="127.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.07%)</title><rect x="95.9782%" y="197" width="0.0682%" height="15" fill="rgb(245,116,9)" fg:x="1408" fg:w="1"/><text x="96.2282%" y="207.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.07%)</title><rect x="95.9782%" y="181" width="0.0682%" height="15" fill="rgb(209,72,35)" fg:x="1408" fg:w="1"/><text x="96.2282%" y="191.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.07%)</title><rect x="95.9782%" y="165" width="0.0682%" height="15" fill="rgb(226,126,21)" fg:x="1408" fg:w="1"/><text x="96.2282%" y="175.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.07%)</title><rect x="95.9782%" y="149" width="0.0682%" height="15" fill="rgb(227,192,1)" fg:x="1408" fg:w="1"/><text x="96.2282%" y="159.50"></text></g><g><title>__read (1 samples, 0.07%)</title><rect x="95.9782%" y="133" width="0.0682%" height="15" fill="rgb(237,180,29)" fg:x="1408" fg:w="1"/><text x="96.2282%" y="143.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (7 samples, 0.48%)</title><rect x="96.0464%" y="181" width="0.4772%" height="15" fill="rgb(230,197,35)" fg:x="1409" fg:w="7"/><text x="96.2964%" y="191.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (7 samples, 0.48%)</title><rect x="96.0464%" y="165" width="0.4772%" height="15" fill="rgb(246,193,31)" fg:x="1409" fg:w="7"/><text x="96.2964%" y="175.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.48%)</title><rect x="96.0464%" y="149" width="0.4772%" height="15" fill="rgb(241,36,4)" fg:x="1409" fg:w="7"/><text x="96.2964%" y="159.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (7 samples, 0.48%)</title><rect x="96.0464%" y="133" width="0.4772%" height="15" fill="rgb(241,130,17)" fg:x="1409" fg:w="7"/><text x="96.2964%" y="143.50"></text></g><g><title>std::sys::unix::fs::File::read (7 samples, 0.48%)</title><rect x="96.0464%" y="117" width="0.4772%" height="15" fill="rgb(206,137,32)" fg:x="1409" fg:w="7"/><text x="96.2964%" y="127.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (7 samples, 0.48%)</title><rect x="96.0464%" y="101" width="0.4772%" height="15" fill="rgb(237,228,51)" fg:x="1409" fg:w="7"/><text x="96.2964%" y="111.50"></text></g><g><title>__read (7 samples, 0.48%)</title><rect x="96.0464%" y="85" width="0.4772%" height="15" fill="rgb(243,6,42)" fg:x="1409" fg:w="7"/><text x="96.2964%" y="95.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (11 samples, 0.75%)</title><rect x="95.8419%" y="213" width="0.7498%" height="15" fill="rgb(251,74,28)" fg:x="1406" fg:w="11"/><text x="96.0919%" y="223.50"></text></g><g><title>dataprep_pipelines::types::pipeline::deserialize_age_identity (8 samples, 0.55%)</title><rect x="96.0464%" y="197" width="0.5453%" height="15" fill="rgb(218,20,49)" fg:x="1409" fg:w="8"/><text x="96.2964%" y="207.50"></text></g><g><title>&lt;age::x25519::Identity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.07%)</title><rect x="96.5235%" y="181" width="0.0682%" height="15" fill="rgb(238,28,14)" fg:x="1416" fg:w="1"/><text x="96.7735%" y="191.50"></text></g><g><title>age::util::parse_bech32 (1 samples, 0.07%)</title><rect x="96.5235%" y="165" width="0.0682%" height="15" fill="rgb(229,40,46)" fg:x="1416" fg:w="1"/><text x="96.7735%" y="175.50"></text></g><g><title>bech32::decode (1 samples, 0.07%)</title><rect x="96.5235%" y="149" width="0.0682%" height="15" fill="rgb(244,195,20)" fg:x="1416" fg:w="1"/><text x="96.7735%" y="159.50"></text></g><g><title>bech32::split_and_decode (1 samples, 0.07%)</title><rect x="96.5235%" y="133" width="0.0682%" height="15" fill="rgb(253,56,35)" fg:x="1416" fg:w="1"/><text x="96.7735%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.07%)</title><rect x="96.5235%" y="117" width="0.0682%" height="15" fill="rgb(210,149,44)" fg:x="1416" fg:w="1"/><text x="96.7735%" y="127.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (30 samples, 2.04%)</title><rect x="95.0239%" y="261" width="2.0450%" height="15" fill="rgb(240,135,12)" fg:x="1394" fg:w="30"/><text x="95.2739%" y="271.50">&lt;..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (30 samples, 2.04%)</title><rect x="95.0239%" y="245" width="2.0450%" height="15" fill="rgb(251,24,50)" fg:x="1394" fg:w="30"/><text x="95.2739%" y="255.50">&lt;..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (30 samples, 2.04%)</title><rect x="95.0239%" y="229" width="2.0450%" height="15" fill="rgb(243,200,47)" fg:x="1394" fg:w="30"/><text x="95.2739%" y="239.50">&lt;..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.48%)</title><rect x="96.5917%" y="213" width="0.4772%" height="15" fill="rgb(224,166,26)" fg:x="1417" fg:w="7"/><text x="96.8417%" y="223.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (7 samples, 0.48%)</title><rect x="96.5917%" y="197" width="0.4772%" height="15" fill="rgb(233,0,47)" fg:x="1417" fg:w="7"/><text x="96.8417%" y="207.50"></text></g><g><title>std::sys::unix::fs::File::read (7 samples, 0.48%)</title><rect x="96.5917%" y="181" width="0.4772%" height="15" fill="rgb(253,80,5)" fg:x="1417" fg:w="7"/><text x="96.8417%" y="191.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (7 samples, 0.48%)</title><rect x="96.5917%" y="165" width="0.4772%" height="15" fill="rgb(214,133,25)" fg:x="1417" fg:w="7"/><text x="96.8417%" y="175.50"></text></g><g><title>__read (7 samples, 0.48%)</title><rect x="96.5917%" y="149" width="0.4772%" height="15" fill="rgb(209,27,14)" fg:x="1417" fg:w="7"/><text x="96.8417%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.07%)</title><rect x="97.0688%" y="261" width="0.0682%" height="15" fill="rgb(219,102,51)" fg:x="1424" fg:w="1"/><text x="97.3188%" y="271.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.07%)</title><rect x="97.0688%" y="245" width="0.0682%" height="15" fill="rgb(237,18,16)" fg:x="1424" fg:w="1"/><text x="97.3188%" y="255.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.07%)</title><rect x="97.0688%" y="229" width="0.0682%" height="15" fill="rgb(241,85,17)" fg:x="1424" fg:w="1"/><text x="97.3188%" y="239.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.07%)</title><rect x="97.0688%" y="213" width="0.0682%" height="15" fill="rgb(236,90,42)" fg:x="1424" fg:w="1"/><text x="97.3188%" y="223.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.07%)</title><rect x="97.0688%" y="197" width="0.0682%" height="15" fill="rgb(249,57,21)" fg:x="1424" fg:w="1"/><text x="97.3188%" y="207.50"></text></g><g><title>__read (1 samples, 0.07%)</title><rect x="97.0688%" y="181" width="0.0682%" height="15" fill="rgb(243,12,36)" fg:x="1424" fg:w="1"/><text x="97.3188%" y="191.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.07%)</title><rect x="97.1370%" y="261" width="0.0682%" height="15" fill="rgb(253,128,47)" fg:x="1425" fg:w="1"/><text x="97.3870%" y="271.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.07%)</title><rect x="97.1370%" y="245" width="0.0682%" height="15" fill="rgb(207,33,20)" fg:x="1425" fg:w="1"/><text x="97.3870%" y="255.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.07%)</title><rect x="97.1370%" y="229" width="0.0682%" height="15" fill="rgb(233,215,35)" fg:x="1425" fg:w="1"/><text x="97.3870%" y="239.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.07%)</title><rect x="97.1370%" y="213" width="0.0682%" height="15" fill="rgb(249,188,52)" fg:x="1425" fg:w="1"/><text x="97.3870%" y="223.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.07%)</title><rect x="97.1370%" y="197" width="0.0682%" height="15" fill="rgb(225,12,32)" fg:x="1425" fg:w="1"/><text x="97.3870%" y="207.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.07%)</title><rect x="97.1370%" y="181" width="0.0682%" height="15" fill="rgb(247,98,14)" fg:x="1425" fg:w="1"/><text x="97.3870%" y="191.50"></text></g><g><title>__read (1 samples, 0.07%)</title><rect x="97.1370%" y="165" width="0.0682%" height="15" fill="rgb(247,219,48)" fg:x="1425" fg:w="1"/><text x="97.3870%" y="175.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (3 samples, 0.20%)</title><rect x="97.2052%" y="261" width="0.2045%" height="15" fill="rgb(253,60,48)" fg:x="1426" fg:w="3"/><text x="97.4552%" y="271.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.20%)</title><rect x="97.2052%" y="245" width="0.2045%" height="15" fill="rgb(245,15,52)" fg:x="1426" fg:w="3"/><text x="97.4552%" y="255.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.20%)</title><rect x="97.2052%" y="229" width="0.2045%" height="15" fill="rgb(220,133,28)" fg:x="1426" fg:w="3"/><text x="97.4552%" y="239.50"></text></g><g><title>std::sys::unix::fs::File::read (3 samples, 0.20%)</title><rect x="97.2052%" y="213" width="0.2045%" height="15" fill="rgb(217,180,4)" fg:x="1426" fg:w="3"/><text x="97.4552%" y="223.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (3 samples, 0.20%)</title><rect x="97.2052%" y="197" width="0.2045%" height="15" fill="rgb(251,24,1)" fg:x="1426" fg:w="3"/><text x="97.4552%" y="207.50"></text></g><g><title>__read (3 samples, 0.20%)</title><rect x="97.2052%" y="181" width="0.2045%" height="15" fill="rgb(212,185,49)" fg:x="1426" fg:w="3"/><text x="97.4552%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (41 samples, 2.79%)</title><rect x="95.0239%" y="277" width="2.7948%" height="15" fill="rgb(215,175,22)" fg:x="1394" fg:w="41"/><text x="95.2739%" y="287.50">&lt;&amp;..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.41%)</title><rect x="97.4097%" y="261" width="0.4090%" height="15" fill="rgb(250,205,14)" fg:x="1429" fg:w="6"/><text x="97.6597%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (6 samples, 0.41%)</title><rect x="97.4097%" y="245" width="0.4090%" height="15" fill="rgb(225,211,22)" fg:x="1429" fg:w="6"/><text x="97.6597%" y="255.50"></text></g><g><title>std::sys::unix::fs::File::read (6 samples, 0.41%)</title><rect x="97.4097%" y="229" width="0.4090%" height="15" fill="rgb(251,179,42)" fg:x="1429" fg:w="6"/><text x="97.6597%" y="239.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (6 samples, 0.41%)</title><rect x="97.4097%" y="213" width="0.4090%" height="15" fill="rgb(208,216,51)" fg:x="1429" fg:w="6"/><text x="97.6597%" y="223.50"></text></g><g><title>__read (6 samples, 0.41%)</title><rect x="97.4097%" y="197" width="0.4090%" height="15" fill="rgb(235,36,11)" fg:x="1429" fg:w="6"/><text x="97.6597%" y="207.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (6 samples, 0.41%)</title><rect x="97.8187%" y="277" width="0.4090%" height="15" fill="rgb(213,189,28)" fg:x="1435" fg:w="6"/><text x="98.0687%" y="287.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.41%)</title><rect x="97.8187%" y="261" width="0.4090%" height="15" fill="rgb(227,203,42)" fg:x="1435" fg:w="6"/><text x="98.0687%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (6 samples, 0.41%)</title><rect x="97.8187%" y="245" width="0.4090%" height="15" fill="rgb(244,72,36)" fg:x="1435" fg:w="6"/><text x="98.0687%" y="255.50"></text></g><g><title>std::sys::unix::fs::File::read (6 samples, 0.41%)</title><rect x="97.8187%" y="229" width="0.4090%" height="15" fill="rgb(213,53,17)" fg:x="1435" fg:w="6"/><text x="98.0687%" y="239.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (6 samples, 0.41%)</title><rect x="97.8187%" y="213" width="0.4090%" height="15" fill="rgb(207,167,3)" fg:x="1435" fg:w="6"/><text x="98.0687%" y="223.50"></text></g><g><title>__read (6 samples, 0.41%)</title><rect x="97.8187%" y="197" width="0.4090%" height="15" fill="rgb(216,98,30)" fg:x="1435" fg:w="6"/><text x="98.0687%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (50 samples, 3.41%)</title><rect x="95.0239%" y="293" width="3.4083%" height="15" fill="rgb(236,123,15)" fg:x="1394" fg:w="50"/><text x="95.2739%" y="303.50">&lt;&amp;m..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.20%)</title><rect x="98.2277%" y="277" width="0.2045%" height="15" fill="rgb(248,81,50)" fg:x="1441" fg:w="3"/><text x="98.4777%" y="287.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.20%)</title><rect x="98.2277%" y="261" width="0.2045%" height="15" fill="rgb(214,120,4)" fg:x="1441" fg:w="3"/><text x="98.4777%" y="271.50"></text></g><g><title>std::sys::unix::fs::File::read (3 samples, 0.20%)</title><rect x="98.2277%" y="245" width="0.2045%" height="15" fill="rgb(208,179,34)" fg:x="1441" fg:w="3"/><text x="98.4777%" y="255.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (3 samples, 0.20%)</title><rect x="98.2277%" y="229" width="0.2045%" height="15" fill="rgb(227,140,7)" fg:x="1441" fg:w="3"/><text x="98.4777%" y="239.50"></text></g><g><title>__read (3 samples, 0.20%)</title><rect x="98.2277%" y="213" width="0.2045%" height="15" fill="rgb(214,22,6)" fg:x="1441" fg:w="3"/><text x="98.4777%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (98 samples, 6.68%)</title><rect x="91.8882%" y="325" width="6.6803%" height="15" fill="rgb(207,137,27)" fg:x="1348" fg:w="98"/><text x="92.1382%" y="335.50">&lt;&amp;mut ser..</text></g><g><title>dataprep_pipelines::types::shared::_::&lt;impl serde::de::Deserialize for dataprep_pipelines::types::shared::DataProcessDirectiveToDisk&lt;T&gt;&gt;::deserialize (52 samples, 3.54%)</title><rect x="95.0239%" y="309" width="3.5446%" height="15" fill="rgb(210,8,46)" fg:x="1394" fg:w="52"/><text x="95.2739%" y="319.50">data..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.14%)</title><rect x="98.4322%" y="293" width="0.1363%" height="15" fill="rgb(240,16,54)" fg:x="1444" fg:w="2"/><text x="98.6822%" y="303.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.14%)</title><rect x="98.4322%" y="277" width="0.1363%" height="15" fill="rgb(211,209,29)" fg:x="1444" fg:w="2"/><text x="98.6822%" y="287.50"></text></g><g><title>std::sys::unix::fs::File::read (2 samples, 0.14%)</title><rect x="98.4322%" y="261" width="0.1363%" height="15" fill="rgb(226,228,24)" fg:x="1444" fg:w="2"/><text x="98.6822%" y="271.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (2 samples, 0.14%)</title><rect x="98.4322%" y="245" width="0.1363%" height="15" fill="rgb(222,84,9)" fg:x="1444" fg:w="2"/><text x="98.6822%" y="255.50"></text></g><g><title>__read (2 samples, 0.14%)</title><rect x="98.4322%" y="229" width="0.1363%" height="15" fill="rgb(234,203,30)" fg:x="1444" fg:w="2"/><text x="98.6822%" y="239.50"></text></g><g><title>pipeline-27a0be (1,447 samples, 98.64%)</title><rect x="0.0000%" y="773" width="98.6367%" height="15" fill="rgb(238,109,14)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="783.50">pipeline-27a0be</text></g><g><title>__libc_start_main (1,447 samples, 98.64%)</title><rect x="0.0000%" y="757" width="98.6367%" height="15" fill="rgb(233,206,34)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="767.50">__libc_start_main</text></g><g><title>main (1,447 samples, 98.64%)</title><rect x="0.0000%" y="741" width="98.6367%" height="15" fill="rgb(220,167,47)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="751.50">main</text></g><g><title>std::rt::lang_start_internal (1,447 samples, 98.64%)</title><rect x="0.0000%" y="725" width="98.6367%" height="15" fill="rgb(238,105,10)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="735.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,447 samples, 98.64%)</title><rect x="0.0000%" y="709" width="98.6367%" height="15" fill="rgb(213,227,17)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,447 samples, 98.64%)</title><rect x="0.0000%" y="693" width="98.6367%" height="15" fill="rgb(217,132,38)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,447 samples, 98.64%)</title><rect x="0.0000%" y="677" width="98.6367%" height="15" fill="rgb(242,146,4)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="687.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,447 samples, 98.64%)</title><rect x="0.0000%" y="661" width="98.6367%" height="15" fill="rgb(212,61,9)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="671.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,447 samples, 98.64%)</title><rect x="0.0000%" y="645" width="98.6367%" height="15" fill="rgb(247,126,22)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,447 samples, 98.64%)</title><rect x="0.0000%" y="629" width="98.6367%" height="15" fill="rgb(220,196,2)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,447 samples, 98.64%)</title><rect x="0.0000%" y="613" width="98.6367%" height="15" fill="rgb(208,46,4)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="623.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,447 samples, 98.64%)</title><rect x="0.0000%" y="597" width="98.6367%" height="15" fill="rgb(252,104,46)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="607.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,447 samples, 98.64%)</title><rect x="0.0000%" y="581" width="98.6367%" height="15" fill="rgb(237,152,48)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="591.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,447 samples, 98.64%)</title><rect x="0.0000%" y="565" width="98.6367%" height="15" fill="rgb(221,59,37)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="575.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>pipeline::main (1,447 samples, 98.64%)</title><rect x="0.0000%" y="549" width="98.6367%" height="15" fill="rgb(209,202,51)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="559.50">pipeline::main</text></g><g><title>pipeline::pipeline_benchmark (1,447 samples, 98.64%)</title><rect x="0.0000%" y="533" width="98.6367%" height="15" fill="rgb(228,81,30)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="543.50">pipeline::pipeline_benchmark</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,447 samples, 98.64%)</title><rect x="0.0000%" y="517" width="98.6367%" height="15" fill="rgb(227,42,39)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="527.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,447 samples, 98.64%)</title><rect x="0.0000%" y="501" width="98.6367%" height="15" fill="rgb(221,26,2)" fg:x="0" fg:w="1447"/><text x="0.2500%" y="511.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (123 samples, 8.38%)</title><rect x="90.2522%" y="485" width="8.3845%" height="15" fill="rgb(254,61,31)" fg:x="1324" fg:w="123"/><text x="90.5022%" y="495.50">&lt;criterion::..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_batched (123 samples, 8.38%)</title><rect x="90.2522%" y="469" width="8.3845%" height="15" fill="rgb(222,173,38)" fg:x="1324" fg:w="123"/><text x="90.5022%" y="479.50">criterion::b..</text></g><g><title>&lt;&amp;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (123 samples, 8.38%)</title><rect x="90.2522%" y="453" width="8.3845%" height="15" fill="rgb(218,50,12)" fg:x="1324" fg:w="123"/><text x="90.5022%" y="463.50">&lt;&amp;tokio::run..</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (123 samples, 8.38%)</title><rect x="90.2522%" y="437" width="8.3845%" height="15" fill="rgb(223,88,40)" fg:x="1324" fg:w="123"/><text x="90.5022%" y="447.50">tokio::runti..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (123 samples, 8.38%)</title><rect x="90.2522%" y="421" width="8.3845%" height="15" fill="rgb(237,54,19)" fg:x="1324" fg:w="123"/><text x="90.5022%" y="431.50">tokio::runti..</text></g><g><title>pipeline::unpack_benchmark::{{closure}}::{{closure}}::{{closure}} (122 samples, 8.32%)</title><rect x="90.3204%" y="405" width="8.3163%" height="15" fill="rgb(251,129,25)" fg:x="1325" fg:w="122"/><text x="90.5704%" y="415.50">pipeline::un..</text></g><g><title>serde_json::de::from_reader (99 samples, 6.75%)</title><rect x="91.8882%" y="389" width="6.7485%" height="15" fill="rgb(238,97,19)" fg:x="1348" fg:w="99"/><text x="92.1382%" y="399.50">serde_jso..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (99 samples, 6.75%)</title><rect x="91.8882%" y="373" width="6.7485%" height="15" fill="rgb(240,169,18)" fg:x="1348" fg:w="99"/><text x="92.1382%" y="383.50">&lt;&amp;mut ser..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (99 samples, 6.75%)</title><rect x="91.8882%" y="357" width="6.7485%" height="15" fill="rgb(230,187,49)" fg:x="1348" fg:w="99"/><text x="92.1382%" y="367.50">&lt;serde::d..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (99 samples, 6.75%)</title><rect x="91.8882%" y="341" width="6.7485%" height="15" fill="rgb(209,44,26)" fg:x="1348" fg:w="99"/><text x="92.1382%" y="351.50">&lt;serde_js..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.07%)</title><rect x="98.5685%" y="325" width="0.0682%" height="15" fill="rgb(244,0,6)" fg:x="1446" fg:w="1"/><text x="98.8185%" y="335.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.07%)</title><rect x="98.5685%" y="309" width="0.0682%" height="15" fill="rgb(248,18,21)" fg:x="1446" fg:w="1"/><text x="98.8185%" y="319.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.07%)</title><rect x="98.5685%" y="293" width="0.0682%" height="15" fill="rgb(245,180,19)" fg:x="1446" fg:w="1"/><text x="98.8185%" y="303.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.07%)</title><rect x="98.5685%" y="277" width="0.0682%" height="15" fill="rgb(252,118,36)" fg:x="1446" fg:w="1"/><text x="98.8185%" y="287.50"></text></g><g><title>__read (1 samples, 0.07%)</title><rect x="98.5685%" y="261" width="0.0682%" height="15" fill="rgb(210,224,19)" fg:x="1446" fg:w="1"/><text x="98.8185%" y="271.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (15 samples, 1.02%)</title><rect x="98.7048%" y="629" width="1.0225%" height="15" fill="rgb(218,30,24)" fg:x="1448" fg:w="15"/><text x="98.9548%" y="639.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 1.02%)</title><rect x="98.7048%" y="613" width="1.0225%" height="15" fill="rgb(219,75,50)" fg:x="1448" fg:w="15"/><text x="98.9548%" y="623.50"></text></g><g><title>std::fs::DirBuilder::create_dir_all (14 samples, 0.95%)</title><rect x="98.7730%" y="597" width="0.9543%" height="15" fill="rgb(234,72,50)" fg:x="1449" fg:w="14"/><text x="99.0230%" y="607.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir (14 samples, 0.95%)</title><rect x="98.7730%" y="581" width="0.9543%" height="15" fill="rgb(219,100,48)" fg:x="1449" fg:w="14"/><text x="99.0230%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (14 samples, 0.95%)</title><rect x="98.7730%" y="565" width="0.9543%" height="15" fill="rgb(253,5,41)" fg:x="1449" fg:w="14"/><text x="99.0230%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (14 samples, 0.95%)</title><rect x="98.7730%" y="549" width="0.9543%" height="15" fill="rgb(247,181,11)" fg:x="1449" fg:w="14"/><text x="99.0230%" y="559.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir::{{closure}} (14 samples, 0.95%)</title><rect x="98.7730%" y="533" width="0.9543%" height="15" fill="rgb(222,223,25)" fg:x="1449" fg:w="14"/><text x="99.0230%" y="543.50"></text></g><g><title>mkdir (14 samples, 0.95%)</title><rect x="98.7730%" y="517" width="0.9543%" height="15" fill="rgb(214,198,28)" fg:x="1449" fg:w="14"/><text x="99.0230%" y="527.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (2 samples, 0.14%)</title><rect x="99.7273%" y="629" width="0.1363%" height="15" fill="rgb(230,46,43)" fg:x="1463" fg:w="2"/><text x="99.9773%" y="639.50"></text></g><g><title>tokio::runtime::park::wake_by_ref (2 samples, 0.14%)</title><rect x="99.7273%" y="613" width="0.1363%" height="15" fill="rgb(233,65,53)" fg:x="1463" fg:w="2"/><text x="99.9773%" y="623.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.14%)</title><rect x="99.7273%" y="597" width="0.1363%" height="15" fill="rgb(221,121,27)" fg:x="1463" fg:w="2"/><text x="99.9773%" y="607.50"></text></g><g><title>syscall (2 samples, 0.14%)</title><rect x="99.7273%" y="581" width="0.1363%" height="15" fill="rgb(247,70,47)" fg:x="1463" fg:w="2"/><text x="99.9773%" y="591.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (18 samples, 1.23%)</title><rect x="98.7048%" y="645" width="1.2270%" height="15" fill="rgb(228,85,35)" fg:x="1448" fg:w="18"/><text x="98.9548%" y="655.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (1 samples, 0.07%)</title><rect x="99.8637%" y="629" width="0.0682%" height="15" fill="rgb(209,50,18)" fg:x="1465" fg:w="1"/><text x="100.1137%" y="639.50"></text></g><g><title>__aarch64_cas8_rel (1 samples, 0.07%)</title><rect x="99.8637%" y="613" width="0.0682%" height="15" fill="rgb(250,19,35)" fg:x="1465" fg:w="1"/><text x="100.1137%" y="623.50"></text></g><g><title>all (1,467 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(253,107,29)" fg:x="0" fg:w="1467"/><text x="0.2500%" y="799.50"></text></g><g><title>tokio-runtime-w (20 samples, 1.36%)</title><rect x="98.6367%" y="773" width="1.3633%" height="15" fill="rgb(252,179,29)" fg:x="1447" fg:w="20"/><text x="98.8867%" y="783.50"></text></g><g><title>start_thread (19 samples, 1.30%)</title><rect x="98.7048%" y="757" width="1.2952%" height="15" fill="rgb(238,194,6)" fg:x="1448" fg:w="19"/><text x="98.9548%" y="767.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (19 samples, 1.30%)</title><rect x="98.7048%" y="741" width="1.2952%" height="15" fill="rgb(238,164,29)" fg:x="1448" fg:w="19"/><text x="98.9548%" y="751.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (19 samples, 1.30%)</title><rect x="98.7048%" y="725" width="1.2952%" height="15" fill="rgb(224,25,9)" fg:x="1448" fg:w="19"/><text x="98.9548%" y="735.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (19 samples, 1.30%)</title><rect x="98.7048%" y="709" width="1.2952%" height="15" fill="rgb(244,153,23)" fg:x="1448" fg:w="19"/><text x="98.9548%" y="719.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (19 samples, 1.30%)</title><rect x="98.7048%" y="693" width="1.2952%" height="15" fill="rgb(212,203,14)" fg:x="1448" fg:w="19"/><text x="98.9548%" y="703.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (19 samples, 1.30%)</title><rect x="98.7048%" y="677" width="1.2952%" height="15" fill="rgb(220,164,20)" fg:x="1448" fg:w="19"/><text x="98.9548%" y="687.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (19 samples, 1.30%)</title><rect x="98.7048%" y="661" width="1.2952%" height="15" fill="rgb(222,203,48)" fg:x="1448" fg:w="19"/><text x="98.9548%" y="671.50"></text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 0.07%)</title><rect x="99.9318%" y="645" width="0.0682%" height="15" fill="rgb(215,159,22)" fg:x="1466" fg:w="1"/><text x="100.1818%" y="655.50"></text></g></svg></svg>