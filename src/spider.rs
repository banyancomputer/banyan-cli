use crate::types::spider::SpiderMetadata;
use anyhow::Result;
use futures::stream::BoxStream;
use futures::StreamExt;
use jwalk::WalkDir;
use std::path::PathBuf;

pub fn spider(
    input_dir: PathBuf,
    follow_links: bool,
) -> Result<BoxStream<'static, Result<SpiderMetadata>>> {
    // Canonicalize the path
    let path_root = input_dir.canonicalize()?;

    // Walk the contents of the input directory and get a list of them
    let walk_dir = WalkDir::new(path_root)
        // Only follow symlinks if the user specified it
        .follow_links(follow_links)
        // Process the contents of the directory in parallel
        .process_read_dir(|_depth, _path, _read_dir_state, _children| ());
    // TODO (laudiacay): make sure handoff from jwalk to tokio is efficient
    // Hand off the iterator generated by WalkDirGeneric to tokio. This turns the iterator into a stream
    let directory_stream = tokio_stream::iter(walk_dir);
    Ok(Box::pin(
        directory_stream.map(|item| item.map(|d| d.into()).map_err(|e| e.into())),
    ))
}
